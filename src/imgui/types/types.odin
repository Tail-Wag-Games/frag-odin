package types

import "thirdparty:cimgui"

import _c "core:c"
import "core:math/linalg"

Imgui_Api :: struct {
  CreateContext : #type proc "c" (shared_font_atlas : ^cimgui.Font_Atlas) -> ^cimgui.Context,
  DestroyContext : #type proc "c" (ctx : ^cimgui.Context),
  // GetCurrentContext : #type proc "c" () -> ^ImGuiContext,
  // SetCurrentContext : #type proc "c" (ctx : ^ImGuiContext),
  GetIO : #type proc "c" () -> ^cimgui.IO,
  // GetStyle : #type proc "c" () -> ^ImGuiStyle,
  NewFrame : #type proc "c" (),
  EndFrame : #type proc "c" (),
  Render : #type proc "c" (),
  // GetDrawData : #type proc "c" () -> ^ImDrawData,
  // ShowMetricsWindow : #type proc "c" (p_open : ^bool),
  // GetVersion : #type proc "c" () -> cstring,
  StyleColorsDark : #type proc "c" (dst : ^cimgui.Style),
  // StyleColorsLight : #type proc "c" (dst : ^ImGuiStyle),
  // StyleColorsClassic : #type proc "c" (dst : ^ImGuiStyle),
  Begin : #type proc "c" (name : cstring, p_open : ^bool, flags : cimgui.Window_Flags) -> bool,
  End : #type proc "c" (),
  // BeginChild_Str : #type proc "c" (str_id : cstring, size : linalg.Vector2f32, border : bool, flags : _c.int) -> bool,
  // BeginChild_ID : #type proc "c" (id : _c.uint, size : linalg.Vector2f32, border : bool, flags : _c.int) -> bool,
  // EndChild : #type proc "c" (),
  // IsWindowAppearing : #type proc "c" () -> bool,
  // IsWindowCollapsed : #type proc "c" () -> bool,
  // IsWindowFocused : #type proc "c" (flags : _c.int) -> bool,
  // IsWindowHovered : #type proc "c" (flags : _c.int) -> bool,
  // GetWindowDrawList : #type proc "c" () -> ^ImDrawList,
  // GetWindowDpiScale : #type proc "c" () -> _c.float,
  // GetWindowPos : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetWindowSize : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetWindowWidth : #type proc "c" () -> _c.float,
  // GetWindowHeight : #type proc "c" () -> _c.float,
  // GetWindowViewport : #type proc "c" () -> ^ImGuiViewport,
  // SetNextWindowPos : #type proc "c" (pos : linalg.Vector2f32, cond : _c.int, pivot : linalg.Vector2f32),
  // SetNextWindowSize : #type proc "c" (size : linalg.Vector2f32, cond : _c.int),
  // SetNextWindowSizeConstraints : #type proc "c" (size_min : linalg.Vector2f32, size_max : linalg.Vector2f32, customcallback : Size_Callback, customcallback_data : rawptr),
  SetNextWindowContentSize : #type proc "c" (size : linalg.Vector2f32),
  // SetNextWindowCollapsed : #type proc "c" (collapsed : bool, cond : _c.int),
  // SetNextWindowFocus : #type proc "c" (),
  // SetNextWindowBgAlpha : #type proc "c" (alpha : _c.float),
  // SetNextWindowViewport : #type proc "c" (viewport_id : _c.uint),
  // SetWindowPos_Vec2 : #type proc "c" (pos : linalg.Vector2f32, cond : _c.int),
  // SetWindowSize_Vec2 : #type proc "c" (size : linalg.Vector2f32, cond : _c.int),
  // SetWindowCollapsedbool : #type proc "c" (collapsed : bool, cond : _c.int),
  // SetWindowFocus_Nil : #type proc "c" (),
  // SetWindowFontScale : #type proc "c" (scale : _c.float),
  // SetWindowPos_Str : #type proc "c" (name : cstring, pos : linalg.Vector2f32, cond : _c.int),
  // SetWindowSize_Str : #type proc "c" (name : cstring, size : linalg.Vector2f32, cond : _c.int),
  // SetWindowCollapsed_Str : #type proc "c" (name : cstring, collapsed : bool, cond : _c.int),
  // SetWindowFocus_Str : #type proc "c" (name : cstring),
  // GetContentRegionAvail : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetContentRegionMax : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetWindowContentRegionMin : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetWindowContentRegionMax : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetWindowContentRegionWidth : #type proc "c" () -> _c.float,
  // GetScrollX : #type proc "c" () -> _c.float,
  // GetScrollY : #type proc "c" () -> _c.float,
  // SetScrollX_Float : #type proc "c" (scroll_x : _c.float),
  // SetScrollY_Float : #type proc "c" (scroll_y : _c.float),
  // GetScrollMaxX : #type proc "c" () -> _c.float,
  // GetScrollMaxY : #type proc "c" () -> _c.float,
  // SetScrollHereX : #type proc "c" (center_x_ratio : _c.float),
  // SetScrollHereY : #type proc "c" (center_y_ratio : _c.float),
  // SetScrollFromPosX_Float : #type proc "c" (local_x : _c.float, center_x_ratio : _c.float),
  // SetScrollFromPosY_Float : #type proc "c" (local_y : _c.float, center_y_ratio : _c.float),
  // PushFont : #type proc "c" (font : ^ImFont),
  // PopFont : #type proc "c" (),
  // PushStyleColor_U32 : #type proc "c" (idx : _c.int, col : _c.uint),
  // PushStyleColor_Vec4 : #type proc "c" (idx : _c.int, col : ImVec4),
  // PopStyleColor : #type proc "c" (count : _c.int),
  // PushStyleVar_Float : #type proc "c" (idx : _c.int, val : _c.float),
  // PushStyleVar_Vec2 : #type proc "c" (idx : _c.int, val : linalg.Vector2f32),
  // PopStyleVar : #type proc "c" (count : _c.int),
  // PushAllowKeyboardFocus : #type proc "c" (allow_keyboard_focus : bool),
  // PopAllowKeyboardFocus : #type proc "c" (),
  // PushButtonRepeat : #type proc "c" (repeat : bool),
  // PopButtonRepeat : #type proc "c" (),
  // PushItemWidth : #type proc "c" (item_width : _c.float),
  // PopItemWidth : #type proc "c" (),
  // SetNextItemWidth : #type proc "c" (item_width : _c.float),
  // CalcItemWidth : #type proc "c" () -> _c.float,
  // PushTextWrapPos : #type proc "c" (wrap_local_pos_x : _c.float),
  // PopTextWrapPos : #type proc "c" (),
  // GetFont : #type proc "c" () -> ^ImFont,
  // GetFontSize : #type proc "c" () -> _c.float,
  // GetFontTexUvWhitePixel : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetColorU32_Col : #type proc "c" (idx : _c.int, alpha_mul : _c.float) -> _c.uint,
  // GetColorU32_Vec4 : #type proc "c" (col : ImVec4) -> _c.uint,
  // GetColorU32_U32 : #type proc "c" (col : _c.uint) -> _c.uint,
  // GetStyleColorVec4 : #type proc "c" (idx : _c.int) -> ^ImVec4,
  // Separator : #type proc "c" (),
  // SameLine : #type proc "c" (offset_from_start_x : _c.float, spacing : _c.float),
  // NewLine : #type proc "c" (),
  // Spacing : #type proc "c" (),
  // Dummy : #type proc "c" (size : linalg.Vector2f32),
  // Indent : #type proc "c" (indent_w : _c.float),
  // Unindent : #type proc "c" (indent_w : _c.float),
  // BeginGroup : #type proc "c" (),
  // EndGroup : #type proc "c" (),
  // GetCursorPos : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetCursorPosX : #type proc "c" () -> _c.float,
  // GetCursorPosY : #type proc "c" () -> _c.float,
  // SetCursorPos : #type proc "c" (local_pos : linalg.Vector2f32),
  // SetCursorPosX : #type proc "c" (local_x : _c.float),
  // SetCursorPosY : #type proc "c" (local_y : _c.float),
  // GetCursorStartPos : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetCursorScreenPos : #type proc "c" (pOut : ^linalg.Vector2f32),
  // SetCursorScreenPos : #type proc "c" (pos : linalg.Vector2f32),
  // AlignTextToFramePadding : #type proc "c" (),
  // GetTextLineHeight : #type proc "c" () -> _c.float,
  // GetTextLineHeightWithSpacing : #type proc "c" () -> _c.float,
  // GetFrameHeight : #type proc "c" () -> _c.float,
  // GetFrameHeightWithSpacing : #type proc "c" () -> _c.float,
  // PushID_Str : #type proc "c" (str_id : cstring),
  // PushID_StrStr : #type proc "c" (str_id_begin : cstring, str_id_end : cstring),
  // PushID_Ptr : #type proc "c" (ptr_id : rawptr),
  // PushID_Int : #type proc "c" (int_id : _c.int),
  // PopID : #type proc "c" (),
  // GetID_Str : #type proc "c" (str_id : cstring) -> _c.uint,
  // GetID_StrStr : #type proc "c" (str_id_begin : cstring, str_id_end : cstring) -> _c.uint,
  // GetID_Ptr : #type proc "c" (ptr_id : rawptr) -> _c.uint,
  // TextUnformatted : #type proc "c" (text : cstring, text_end : cstring),
  // Text : #type proc "c" (fmt : cstring),
  // TextV : #type proc "c" (fmt : cstring, #c_vararg args: ..any),
  // TextColored : #type proc "c" (col : ImVec4, fmt : cstring),
  // TextColoredV : #type proc "c" (col : ImVec4, fmt : cstring, #c_vararg args: ..any),
  // TextDisabled : #type proc "c" (fmt : cstring),
  // TextDisabledV : #type proc "c" (fmt : cstring, #c_vararg args: ..any),
  // TextWrapped : #type proc "c" (fmt : cstring),
  // TextWrappedV : #type proc "c" (fmt : cstring, #c_vararg args: ..any),
  LabelText : #type proc "c" (label : cstring, fmt : cstring, #c_vararg args: ..any),
  // LabelTextV : #type proc "c" (label : cstring, fmt : cstring, #c_vararg args: ..any),
  // BulletText : #type proc "c" (fmt : cstring),
  // BulletTextV : #type proc "c" (fmt : cstring, #c_vararg args: ..any),
  // Button : #type proc "c" (label : cstring, size : linalg.Vector2f32) -> bool,
  // SmallButton : #type proc "c" (label : cstring) -> bool,
  // InvisibleButton : #type proc "c" (str_id : cstring, size : linalg.Vector2f32, flags : _c.int) -> bool,
  // ArrowButton : #type proc "c" (str_id : cstring, dir : _c.int) -> bool,
  // Image : #type proc "c" (user_texture_id : ImTextureID, size : linalg.Vector2f32, uv0 : linalg.Vector2f32, uv1 : linalg.Vector2f32, tintcol : ImVec4, bordercol : ImVec4),
  // ImageButton : #type proc "c" (user_texture_id : ImTextureID, size : linalg.Vector2f32, uv0 : linalg.Vector2f32, uv1 : linalg.Vector2f32, frame_padding : _c.int, bgcol : ImVec4, tintcol : ImVec4) -> bool,
  // Checkbox : #type proc "c" (label : cstring, v : ^bool) -> bool,
  // CheckboxFlags_IntPtr : #type proc "c" (label : cstring, flags : ^_c.int, flags_value : _c.int) -> bool,
  // CheckboxFlags_UintPtr : #type proc "c" (label : cstring, flags : ^_c.uint, flags_value : _c.uint) -> bool,
  // RadioButtonbool : #type proc "c" (label : cstring, active : bool) -> bool,
  // RadioButton_IntPtr : #type proc "c" (label : cstring, v : ^_c.int, v_button : _c.int) -> bool,
  // ProgressBar : #type proc "c" (fraction : _c.float, size_arg : linalg.Vector2f32, overlay : cstring),
  // Bullet : #type proc "c" (),
  // BeginCombo : #type proc "c" (label : cstring, preview_value : cstring, flags : _c.int) -> bool,
  // EndCombo : #type proc "c" (),
  // Combo_Str_arr : #type proc "c" (label : cstring, current_item : ^_c.int, items : ^cstring, itemscount : _c.int, popup_max_height_in_items : _c.int) -> bool,
  // Combo_Str : #type proc "c" (label : cstring, current_item : ^_c.int, items_separated_by_zeros : cstring, popup_max_height_in_items : _c.int) -> bool,
  // Combo_FnBoolPtr : #type proc "c" (label : cstring, current_item : ^_c.int, unamed0 : #type proc "c" (data : rawptr, idx : _c.int, out_text : ^cstring) -> bool, data : rawptr, itemscount : _c.int, popup_max_height_in_items : _c.int) -> bool,
  // DragFloat : #type proc "c" (label : cstring, v : ^_c.float, v_speed : _c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // DragFloat2 : #type proc "c" (label : cstring, v : [2]_c.float, v_speed : _c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // DragFloat3 : #type proc "c" (label : cstring, v : [3]_c.float, v_speed : _c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // DragFloat4 : #type proc "c" (label : cstring, v : [4]_c.float, v_speed : _c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // DragFloatRange2 : #type proc "c" (label : cstring, vcurrent_min : ^_c.float, vcurrent_max : ^_c.float, v_speed : _c.float, v_min : _c.float, v_max : _c.float, format : cstring, format_max : cstring, flags : _c.int) -> bool,
  // DragInt : #type proc "c" (label : cstring, v : ^_c.int, v_speed : _c.float, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // DragInt2 : #type proc "c" (label : cstring, v : [2]_c.int, v_speed : _c.float, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // DragInt3 : #type proc "c" (label : cstring, v : [3]_c.int, v_speed : _c.float, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // DragInt4 : #type proc "c" (label : cstring, v : [4]_c.int, v_speed : _c.float, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // DragIntRange2 : #type proc "c" (label : cstring, vcurrent_min : ^_c.int, vcurrent_max : ^_c.int, v_speed : _c.float, v_min : _c.int, v_max : _c.int, format : cstring, format_max : cstring, flags : _c.int) -> bool,
  // DragScalar : #type proc "c" (label : cstring, data_type : _c.int, p_data : rawptr, v_speed : _c.float, p_min : rawptr, p_max : rawptr, format : cstring, flags : _c.int) -> bool,
  // DragScalarN : #type proc "c" (label : cstring, data_type : _c.int, p_data : rawptr, components : _c.int, v_speed : _c.float, p_min : rawptr, p_max : rawptr, format : cstring, flags : _c.int) -> bool,
  // SliderFloat : #type proc "c" (label : cstring, v : ^_c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // SliderFloat2 : #type proc "c" (label : cstring, v : [2]_c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // SliderFloat3 : #type proc "c" (label : cstring, v : [3]_c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // SliderFloat4 : #type proc "c" (label : cstring, v : [4]_c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // SliderAngle : #type proc "c" (label : cstring, v_rad : ^_c.float, v_degrees_min : _c.float, v_degrees_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // SliderInt : #type proc "c" (label : cstring, v : ^_c.int, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // SliderInt2 : #type proc "c" (label : cstring, v : [2]_c.int, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // SliderInt3 : #type proc "c" (label : cstring, v : [3]_c.int, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // SliderInt4 : #type proc "c" (label : cstring, v : [4]_c.int, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // SliderScalar : #type proc "c" (label : cstring, data_type : _c.int, p_data : rawptr, p_min : rawptr, p_max : rawptr, format : cstring, flags : _c.int) -> bool,
  // SliderScalarN : #type proc "c" (label : cstring, data_type : _c.int, p_data : rawptr, components : _c.int, p_min : rawptr, p_max : rawptr, format : cstring, flags : _c.int) -> bool,
  // VSliderFloat : #type proc "c" (label : cstring, size : linalg.Vector2f32, v : ^_c.float, v_min : _c.float, v_max : _c.float, format : cstring, flags : _c.int) -> bool,
  // VSliderInt : #type proc "c" (label : cstring, size : linalg.Vector2f32, v : ^_c.int, v_min : _c.int, v_max : _c.int, format : cstring, flags : _c.int) -> bool,
  // VSliderScalar : #type proc "c" (label : cstring, size : linalg.Vector2f32, data_type : _c.int, p_data : rawptr, p_min : rawptr, p_max : rawptr, format : cstring, flags : _c.int) -> bool,
  // InputText : #type proc "c" (label : cstring, buf : cstring, buf_size : _c.size_t, flags : _c.int, callback : ImGuiInputTextCallback, user_data : rawptr) -> bool,
  // InputTextMultiline : #type proc "c" (label : cstring, buf : cstring, buf_size : _c.size_t, size : linalg.Vector2f32, flags : _c.int, callback : ImGuiInputTextCallback, user_data : rawptr) -> bool,
  // InputTextWithHint : #type proc "c" (label : cstring, hint : cstring, buf : cstring, buf_size : _c.size_t, flags : _c.int, callback : ImGuiInputTextCallback, user_data : rawptr) -> bool,
  // InputFloat : #type proc "c" (label : cstring, v : ^_c.float, step : _c.float, step_fast : _c.float, format : cstring, flags : _c.int) -> bool,
  // InputFloat2 : #type proc "c" (label : cstring, v : [2]_c.float, format : cstring, flags : _c.int) -> bool,
  // InputFloat3 : #type proc "c" (label : cstring, v : [3]_c.float, format : cstring, flags : _c.int) -> bool,
  // InputFloat4 : #type proc "c" (label : cstring, v : [4]_c.float, format : cstring, flags : _c.int) -> bool,
  // InputInt : #type proc "c" (label : cstring, v : ^_c.int, step : _c.int, step_fast : _c.int, flags : _c.int) -> bool,
  // InputInt2 : #type proc "c" (label : cstring, v : [2]_c.int, flags : _c.int) -> bool,
  // InputInt3 : #type proc "c" (label : cstring, v : [3]_c.int, flags : _c.int) -> bool,
  // InputInt4 : #type proc "c" (label : cstring, v : [4]_c.int, flags : _c.int) -> bool,
  // InputDouble : #type proc "c" (label : cstring, v : ^_c.double, step : _c.double, step_fast : _c.double, format : cstring, flags : _c.int) -> bool,
  // InputScalar : #type proc "c" (label : cstring, data_type : _c.int, p_data : rawptr, p_step : rawptr, p_step_fast : rawptr, format : cstring, flags : _c.int) -> bool,
  // InputScalarN : #type proc "c" (label : cstring, data_type : _c.int, p_data : rawptr, components : _c.int, p_step : rawptr, p_step_fast : rawptr, format : cstring, flags : _c.int) -> bool,
  // ColorEdit3 : #type proc "c" (label : cstring, col : [3]_c.float, flags : _c.int) -> bool,
  // ColorEdit4 : #type proc "c" (label : cstring, col : [4]_c.float, flags : _c.int) -> bool,
  // ColorPicker3 : #type proc "c" (label : cstring, col : [3]_c.float, flags : _c.int) -> bool,
  // ColorPicker4 : #type proc "c" (label : cstring, col : [4]_c.float, flags : _c.int, refcol : ^_c.float) -> bool,
  // ColorButton : #type proc "c" (desc_id : cstring, col : ImVec4, flags : _c.int, size : linalg.Vector2f32) -> bool,
  // SetColorEditOptions : #type proc "c" (flags : _c.int),
  // TreeNode_Str : #type proc "c" (label : cstring) -> bool,
  // TreeNode_StrStr : #type proc "c" (str_id : cstring, fmt : cstring) -> bool,
  // TreeNode_Ptr : #type proc "c" (ptr_id : rawptr, fmt : cstring) -> bool,
  // TreeNodeV_Str : #type proc "c" (str_id : cstring, fmt : cstring, #c_vararg args: ..any) -> bool,
  // TreeNodeV_Ptr : #type proc "c" (ptr_id : rawptr, fmt : cstring, #c_vararg args: ..any) -> bool,
  // TreeNodeEx_Str : #type proc "c" (label : cstring, flags : _c.int) -> bool,
  // TreeNodeEx_StrStr : #type proc "c" (str_id : cstring, flags : _c.int, fmt : cstring) -> bool,
  // TreeNodeEx_Ptr : #type proc "c" (ptr_id : rawptr, flags : _c.int, fmt : cstring) -> bool,
  // TreeNodeExV_Str : #type proc "c" (str_id : cstring, flags : _c.int, fmt : cstring, #c_vararg args: ..any) -> bool,
  // TreeNodeExV_Ptr : #type proc "c" (ptr_id : rawptr, flags : _c.int, fmt : cstring, #c_vararg args: ..any) -> bool,
  // TreePush_Str : #type proc "c" (str_id : cstring),
  // TreePush_Ptr : #type proc "c" (ptr_id : rawptr),
  // TreePop : #type proc "c" (),
  // GetTreeNodeToLabelSpacing : #type proc "c" () -> _c.float,
  // CollapsingHeader_TreeNodeFlags : #type proc "c" (label : cstring, flags : _c.int) -> bool,
  // CollapsingHeaderboolPtr : #type proc "c" (label : cstring, p_visible : ^bool, flags : _c.int) -> bool,
  // SetNextItemOpen : #type proc "c" (is_open : bool, cond : _c.int),
  // Selectablebool : #type proc "c" (label : cstring, selected : bool, flags : _c.int, size : linalg.Vector2f32) -> bool,
  // SelectableboolPtr : #type proc "c" (label : cstring, p_selected : ^bool, flags : _c.int, size : linalg.Vector2f32) -> bool,
  // BeginListBox : #type proc "c" (label : cstring, size : linalg.Vector2f32) -> bool,
  // EndListBox : #type proc "c" (),
  // ListBox_Str_arr : #type proc "c" (label : cstring, current_item : ^_c.int, items : ^cstring, itemscount : _c.int, height_in_items : _c.int) -> bool,
  // ListBox_FnBoolPtr : #type proc "c" (label : cstring, current_item : ^_c.int, unamed0 : #type proc "c" (data : rawptr, idx : _c.int, out_text : ^cstring) -> bool, data : rawptr, itemscount : _c.int, height_in_items : _c.int) -> bool,
  // PlotLines_FloatPtr : #type proc "c" (label : cstring, values : ^_c.float, valuescount : _c.int, values_offset : _c.int, overlay_text : cstring, scale_min : _c.float, scale_max : _c.float, graph_size : linalg.Vector2f32, stride : _c.int),
  // PlotLines_FnFloatPtr : #type proc "c" (label : cstring, unamed0 : #type proc "c" (data : rawptr, idx : _c.int) -> _c.float, data : rawptr, valuescount : _c.int, values_offset : _c.int, overlay_text : cstring, scale_min : _c.float, scale_max : _c.float, graph_size : linalg.Vector2f32),
  // PlotHistogram_FloatPtr : #type proc "c" (label : cstring, values : ^_c.float, valuescount : _c.int, values_offset : _c.int, overlay_text : cstring, scale_min : _c.float, scale_max : _c.float, graph_size : linalg.Vector2f32, stride : _c.int),
  // PlotHistogram_FnFloatPtr : #type proc "c" (label : cstring, unamed0 : #type proc "c" (data : rawptr, idx : _c.int) -> _c.float, data : rawptr, valuescount : _c.int, values_offset : _c.int, overlay_text : cstring, scale_min : _c.float, scale_max : _c.float, graph_size : linalg.Vector2f32),
  // Valuebool : #type proc "c" (prefix : cstring, b : bool),
  // Value_Int : #type proc "c" (prefix : cstring, v : _c.int),
  // Value_Uint : #type proc "c" (prefix : cstring, v : _c.uint),
  // Value_Float : #type proc "c" (prefix : cstring, v : _c.float, float_format : cstring),
  // BeginMenuBar : #type proc "c" () -> bool,
  // EndMenuBar : #type proc "c" (),
  // BeginMainMenuBar : #type proc "c" () -> bool,
  // EndMainMenuBar : #type proc "c" (),
  // BeginMenu : #type proc "c" (label : cstring, enabled : bool) -> bool,
  // EndMenu : #type proc "c" (),
  // MenuItembool : #type proc "c" (label : cstring, shortcut : cstring, selected : bool, enabled : bool) -> bool,
  // MenuItemboolPtr : #type proc "c" (label : cstring, shortcut : cstring, p_selected : ^bool, enabled : bool) -> bool,
  // BeginTooltip : #type proc "c" (),
  // EndTooltip : #type proc "c" (),
  // SetTooltip : #type proc "c" (fmt : cstring),
  // SetTooltipV : #type proc "c" (fmt : cstring, #c_vararg args: ..any),
  // BeginPopup : #type proc "c" (str_id : cstring, flags : _c.int) -> bool,
  // BeginPopupModal : #type proc "c" (name : cstring, p_open : ^bool, flags : _c.int) -> bool,
  // EndPopup : #type proc "c" (),
  // OpenPopup : #type proc "c" (str_id : cstring, popup_flags : _c.int),
  // OpenPopupOnItemClick : #type proc "c" (str_id : cstring, popup_flags : _c.int),
  // CloseCurrentPopup : #type proc "c" (),
  // BeginPopupContextItem : #type proc "c" (str_id : cstring, popup_flags : _c.int) -> bool,
  // BeginPopupContextWindow : #type proc "c" (str_id : cstring, popup_flags : _c.int) -> bool,
  // BeginPopupContextVoid : #type proc "c" (str_id : cstring, popup_flags : _c.int) -> bool,
  // IsPopupOpen_Str : #type proc "c" (str_id : cstring, flags : _c.int) -> bool,
  // BeginTable : #type proc "c" (str_id : cstring, column : _c.int, flags : _c.int, outer_size : linalg.Vector2f32, inner_width : _c.float) -> bool,
  // EndTable : #type proc "c" (),
  // TableNextRow : #type proc "c" (row_flags : _c.int, min_row_height : _c.float),
  // TableNextColumn : #type proc "c" () -> bool,
  // TableSetColumnIndex : #type proc "c" (column_n : _c.int) -> bool,
  // TableSetupColumn : #type proc "c" (label : cstring, flags : _c.int, init_width_or_weight : _c.float, user_id : _c.uint),
  // TableSetupScrollFreeze : #type proc "c" (cols : _c.int, rows : _c.int),
  // TableHeadersRow : #type proc "c" (),
  // TableHeader : #type proc "c" (label : cstring),
  // TableGetSortSpecs : #type proc "c" () -> ^ImGuiTableSortSpecs,
  // TableGetColumnCount : #type proc "c" () -> _c.int,
  // TableGetColumnIndex : #type proc "c" () -> _c.int,
  // TableGetRowIndex : #type proc "c" () -> _c.int,
  // TableGetColumnName_Int : #type proc "c" (column_n : _c.int) -> cstring,
  // TableGetColumnFlags : #type proc "c" (column_n : _c.int) -> _c.int,
  // TableSetBgColor : #type proc "c" (target : _c.int, color : _c.uint, column_n : _c.int),
  // Columns : #type proc "c" (count : _c.int, id : cstring, border : bool),
  // NextColumn : #type proc "c" (),
  // GetColumnIndex : #type proc "c" () -> _c.int,
  // GetColumnWidth : #type proc "c" (column_index : _c.int) -> _c.float,
  // SetColumnWidth : #type proc "c" (column_index : _c.int, width : _c.float),
  // GetColumnOffset : #type proc "c" (column_index : _c.int) -> _c.float,
  // SetColumnOffset : #type proc "c" (column_index : _c.int, offset_x : _c.float),
  // GetColumnsCount : #type proc "c" () -> _c.int,
  // BeginTabBar : #type proc "c" (str_id : cstring, flags : _c.int) -> bool,
  // EndTabBar : #type proc "c" (),
  // BeginTabItem : #type proc "c" (label : cstring, p_open : ^bool, flags : _c.int) -> bool,
  // EndTabItem : #type proc "c" (),
  // TabItemButton : #type proc "c" (label : cstring, flags : _c.int) -> bool,
  // SetTabItemClosed : #type proc "c" (tab_or_docked_window_label : cstring),
  // DockSpace : #type proc "c" (id : _c.uint, size : linalg.Vector2f32, flags : _c.int, windowclass : ^ImGuiWindowClass),
  // DockSpaceOverViewport : #type proc "c" (viewport : ^ImGuiViewport, flags : _c.int, windowclass : ^ImGuiWindowClass) -> _c.uint,
  // SetNextWindowDockID : #type proc "c" (dock_id : _c.uint, cond : _c.int),
  // SetNextWindowClass : #type proc "c" (windowclass : ^ImGuiWindowClass),
  // GetWindowDockID : #type proc "c" () -> _c.uint,
  // IsWindowDocked : #type proc "c" () -> bool,
  // LogToTTY : #type proc "c" (auto_open_depth : _c.int),
  // LogToFile : #type proc "c" (auto_open_depth : _c.int, filename : cstring),
  // LogToClipboard : #type proc "c" (auto_open_depth : _c.int),
  // LogFinish : #type proc "c" (),
  // LogButtons : #type proc "c" (),
  // LogTextV : #type proc "c" (fmt : cstring, #c_vararg args: ..any),
  // BeginDragDropSource : #type proc "c" (flags : _c.int) -> bool,
  // SetDragDropPayload : #type proc "c" (type : cstring, data : rawptr, sz : _c.size_t, cond : _c.int) -> bool,
  // EndDragDropSource : #type proc "c" (),
  // BeginDragDropTarget : #type proc "c" () -> bool,
  // AcceptDragDropPayload : #type proc "c" (type : cstring, flags : _c.int) -> ^ImGuiPayload,
  // EndDragDropTarget : #type proc "c" (),
  // GetDragDropPayload : #type proc "c" () -> ^ImGuiPayload,
  // PushClipRect : #type proc "c" (clip_rect_min : linalg.Vector2f32, clip_rect_max : linalg.Vector2f32, intersect_withcurrentclip_rect : bool),
  // PopClipRect : #type proc "c" (),
  // SetItemDefaultFocus : #type proc "c" (),
  // SetKeyboardFocusHere : #type proc "c" (offset : _c.int),
  // IsItemHovered : #type proc "c" (flags : _c.int) -> bool,
  // IsItemActive : #type proc "c" () -> bool,
  // IsItemFocused : #type proc "c" () -> bool,
  // IsItemClicked : #type proc "c" (mouse_button : _c.int) -> bool,
  // IsItemVisible : #type proc "c" () -> bool,
  // IsItemEdited : #type proc "c" () -> bool,
  // IsItemActivated : #type proc "c" () -> bool,
  // IsItemDeactivated : #type proc "c" () -> bool,
  // IsItemDeactivatedAfterEdit : #type proc "c" () -> bool,
  // IsItemToggledOpen : #type proc "c" () -> bool,
  // IsAnyItemHovered : #type proc "c" () -> bool,
  // IsAnyItemActive : #type proc "c" () -> bool,
  // IsAnyItemFocused : #type proc "c" () -> bool,
  // GetItemRectMin : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetItemRectMax : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetItemRectSize : #type proc "c" (pOut : ^linalg.Vector2f32),
  // SetItemAllowOverlap : #type proc "c" (),
  // GetMainViewport : #type proc "c" () -> ^ImGuiViewport,
  // IsRectVisible_Nil : #type proc "c" (size : linalg.Vector2f32) -> bool,
  // IsRectVisible_Vec2 : #type proc "c" (rect_min : linalg.Vector2f32, rect_max : linalg.Vector2f32) -> bool,
  // GetTime : #type proc "c" () -> _c.double,
  // GetFrameCount : #type proc "c" () -> _c.int,
  // GetBackgroundDrawList_Nil : #type proc "c" () -> ^ImDrawList,
  // GetForegroundDrawList_Nil : #type proc "c" () -> ^ImDrawList,
  // GetBackgroundDrawList_ViewportPtr : #type proc "c" (viewport : ^ImGuiViewport) -> ^ImDrawList,
  // GetForegroundDrawList_ViewportPtr : #type proc "c" (viewport : ^ImGuiViewport) -> ^ImDrawList,
  // GetDrawListSharedData : #type proc "c" () -> ^ImDrawListSharedData,
  // GetStyleColorName : #type proc "c" (idx : _c.int) -> cstring,
  // SetStateStorage : #type proc "c" (storage : ^ImGuiStorage),
  // GetStateStorage : #type proc "c" () -> ^ImGuiStorage,
  // CalcListClipping : #type proc "c" (itemscount : _c.int, items_height : _c.float, out_items_display_start : ^_c.int, out_items_display_end : ^_c.int),
  // BeginChildFrame : #type proc "c" (id : _c.uint, size : linalg.Vector2f32, flags : _c.int) -> bool,
  // EndChildFrame : #type proc "c" (),
  // CalcTextSize : #type proc "c" (pOut : ^linalg.Vector2f32, text : cstring, text_end : cstring, hide_text_after_double_hash : bool, wrap_width : _c.float),
  // ColorConvertU32ToFloat4 : #type proc "c" (pOut : ^ImVec4, _in : _c.uint),
  // ColorConvertFloat4ToU32 : #type proc "c" (_in : ImVec4) -> _c.uint,
  // ColorConvertRGBtoHSV : #type proc "c" (r : _c.float, g : _c.float, b : _c.float, out_h : ^_c.float, out_s : ^_c.float, out_v : ^_c.float),
  // ColorConvertHSVtoRGB : #type proc "c" (h : _c.float, s : _c.float, v : _c.float, out_r : ^_c.float, out_g : ^_c.float, out_b : ^_c.float),
  // GetKeyIndex : #type proc "c" (imgui_key : _c.int) -> _c.int,
  // IsKeyDown : #type proc "c" (user_key_index : _c.int) -> bool,
  // IsKeyPressed : #type proc "c" (user_key_index : _c.int, repeat : bool) -> bool,
  // IsKeyReleased : #type proc "c" (user_key_index : _c.int) -> bool,
  // GetKeyPressedAmount : #type proc "c" (key_index : _c.int, repeat_delay : _c.float, rate : _c.float) -> _c.int,
  // CaptureKeyboardFromApp : #type proc "c" (wantcapture_keyboard_value : bool),
  // IsMouseDown : #type proc "c" (button : _c.int) -> bool,
  // IsMouseClicked : #type proc "c" (button : _c.int, repeat : bool) -> bool,
  // IsMouseReleased : #type proc "c" (button : _c.int) -> bool,
  // IsMouseDoubleClicked : #type proc "c" (button : _c.int) -> bool,
  // IsMouseHoveringRect : #type proc "c" (r_min : linalg.Vector2f32, r_max : linalg.Vector2f32, clip : bool) -> bool,
  // IsMousePosValid : #type proc "c" (mouse_pos : ^linalg.Vector2f32) -> bool,
  // IsAnyMouseDown : #type proc "c" () -> bool,
  // GetMousePos : #type proc "c" (pOut : ^linalg.Vector2f32),
  // GetMousePosOnOpeningCurrentPopup : #type proc "c" (pOut : ^linalg.Vector2f32),
  // IsMouseDragging : #type proc "c" (button : _c.int, lock_threshold : _c.float) -> bool,
  // GetMouseDragDelta : #type proc "c" (pOut : ^linalg.Vector2f32, button : _c.int, lock_threshold : _c.float),
  // ResetMouseDragDelta : #type proc "c" (button : _c.int),
  // GetMouseCursor : #type proc "c" () -> _c.int,
  // SetMouseCursor : #type proc "c" (cursor_type : _c.int),
  // CaptureMouseFromApp : #type proc "c" (wantcapture_mouse_value : bool),
  // GetClipboardText : #type proc "c" () -> cstring,
  // SetClipboardText : #type proc "c" (text : cstring),
  // LoadIniSettingsFromDisk : #type proc "c" (ini_filename : cstring),
  // LoadIniSettingsFromMemory : #type proc "c" (ini_data : cstring, ini_size : _c.size_t),
  // SaveIniSettingsToDisk : #type proc "c" (ini_filename : cstring),
  // SaveIniSettingsToMemory : #type proc "c" (out_ini_size : ^_c.size_t) -> cstring,
  // DebugCheckVersionAndDataLayout : #type proc "c" (version_str : cstring, sz_io : _c.size_t, sz_style : _c.size_t, sz_vec2 : _c.size_t, sz_vec4 : _c.size_t, sz_drawvert : _c.size_t, sz_drawidx : _c.size_t) -> bool,
  // SetAllocatorFunctions : #type proc "c" (alloc_func : ImGuiMemAllocFunc, free_func : ImGuiMemFreeFunc, user_data : rawptr),
  // GetAllocatorFunctions : #type proc "c" (p_alloc_func : ^ImGuiMemAllocFunc, p_free_func : ^ImGuiMemFreeFunc, p_user_data : ^rawptr),
  // MemAlloc : #type proc "c" (size : _c.size_t) -> rawptr,
  // MemFree : #type proc "c" (ptr : rawptr),
  // GetPlatformIO : #type proc "c" () -> ^ImGuiPlatformIO,
  // UpdatePlatformWindows : #type proc "c" (),
  // RenderPlatformWindowsDefault : #type proc "c" (platform_render_arg : rawptr, renderer_render_arg : rawptr),
  // DestroyPlatformWindows : #type proc "c" (),
  // FindViewportByID : #type proc "c" (id : _c.uint) -> ^ImGuiViewport,
  // FindViewportByPlatformHandle : #type proc "c" (platform_handle : rawptr) -> ^ImGuiViewport,
  // ImHashData : #type proc "c" (data : rawptr, data_size : _c.size_t, seed : _c.uint) -> _c.uint,
  // ImHashStr : #type proc "c" (data : cstring, data_size : _c.size_t, seed : _c.uint) -> _c.uint,
  // ImAlphaBlendColors : #type proc "c" (col_a : _c.uint, col_b : _c.uint) -> _c.uint,
  // ImIsPowerOfTwo_Int : #type proc "c" (v : _c.int) -> bool,
  // ImIsPowerOfTwo_U64 : #type proc "c" (v : u64) -> bool,
  // ImUpperPowerOfTwo : #type proc "c" (v : _c.int) -> _c.int,
  // ImStricmp : #type proc "c" (str1 : cstring, str2 : cstring) -> _c.int,
  // ImStrnicmp : #type proc "c" (str1 : cstring, str2 : cstring, count : _c.size_t) -> _c.int,
  // ImStrncpy : #type proc "c" (dst : cstring, src : cstring, count : _c.size_t),
  // ImStrdup : #type proc "c" (str : cstring) -> cstring,
  // ImStrdupcpy : #type proc "c" (dst : cstring, p_dst_size : ^_c.size_t, str : cstring) -> cstring,
  // ImStrchrRange : #type proc "c" (str_begin : cstring, str_end : cstring, c : _c.char) -> cstring,
  // ImStrlenW : #type proc "c" (str : ^_c.ushort) -> _c.int,
  // ImStreolRange : #type proc "c" (str : cstring, str_end : cstring) -> cstring,
  // ImStrbolW : #type proc "c" (buf_mid_line : ^_c.ushort, buf_begin : ^_c.ushort) -> ^_c.ushort,
  // ImStristr : #type proc "c" (haystack : cstring, haystack_end : cstring, needle : cstring, needle_end : cstring) -> cstring,
  // ImStrTrimBlanks : #type proc "c" (str : cstring),
  // ImStrSkipBlank : #type proc "c" (str : cstring) -> cstring,
  // ImFormatString : #type proc "c" (buf : cstring, buf_size : _c.size_t, fmt : cstring) -> _c.int,
  // ImFormatStringV : #type proc "c" (buf : cstring, buf_size : _c.size_t, fmt : cstring, #c_vararg args: ..any) -> _c.int,
  // ImParseFormatFindStart : #type proc "c" (format : cstring) -> cstring,
  // ImParseFormatFindEnd : #type proc "c" (format : cstring) -> cstring,
  // ImParseFormatTrimDecorations : #type proc "c" (format : cstring, buf : cstring, buf_size : _c.size_t) -> cstring,
  // ImParseFormatPrecision : #type proc "c" (format : cstring, default_value : _c.int) -> _c.int,
  // ImCharIsBlankA : #type proc "c" (c : _c.char) -> bool,
  // ImCharIsBlankW : #type proc "c" (c : _c.uint) -> bool,
  // ImTextStrToUtf8 : #type proc "c" (buf : cstring, buf_size : _c.int, in_text : ^_c.ushort, in_text_end : ^_c.ushort) -> _c.int,
  // ImTextCharFromUtf8 : #type proc "c" (outchar : ^_c.uint, in_text : cstring, in_text_end : cstring) -> _c.int,
  // ImTextStrFromUtf8 : #type proc "c" (buf : ^_c.ushort, buf_size : _c.int, in_text : cstring, in_text_end : cstring, in_remaining : ^cstring) -> _c.int,
  // ImTextCountCharsFromUtf8 : #type proc "c" (in_text : cstring, in_text_end : cstring) -> _c.int,
  // ImTextCountUtf8BytesFromChar : #type proc "c" (in_text : cstring, in_text_end : cstring) -> _c.int,
  // ImTextCountUtf8BytesFromStr : #type proc "c" (in_text : ^_c.ushort, in_text_end : ^_c.ushort) -> _c.int,
  // ImFileOpen : #type proc "c" (filename : cstring, mode : cstring) -> ImFileHandle,
  // ImFileClose : #type proc "c" (file : ImFileHandle) -> bool,
  // ImFileGetSize : #type proc "c" (file : ImFileHandle) -> u64,
  // ImFileRead : #type proc "c" (data : rawptr, size : u64, count : u64, file : ImFileHandle) -> u64,
  // ImFileWrite : #type proc "c" (data : rawptr, size : u64, count : u64, file : ImFileHandle) -> u64,
  // ImFileLoadToMemory : #type proc "c" (filename : cstring, mode : cstring, out_file_size : ^_c.size_t, padding_bytes : _c.int) -> rawptr,
  // ImPow_Float : #type proc "c" (x : _c.float, y : _c.float) -> _c.float,
  // ImPow_double : #type proc "c" (x : _c.double, y : _c.double) -> _c.double,
  // ImLog_Float : #type proc "c" (x : _c.float) -> _c.float,
  // ImLog_double : #type proc "c" (x : _c.double) -> _c.double,
  // ImAbs_Float : #type proc "c" (x : _c.float) -> _c.float,
  // ImAbs_double : #type proc "c" (x : _c.double) -> _c.double,
  // ImSign_Float : #type proc "c" (x : _c.float) -> _c.float,
  // ImSign_double : #type proc "c" (x : _c.double) -> _c.double,
  // ImMin : #type proc "c" (pOut : ^linalg.Vector2f32, lhs : linalg.Vector2f32, rhs : linalg.Vector2f32),
  // ImMax : #type proc "c" (pOut : ^linalg.Vector2f32, lhs : linalg.Vector2f32, rhs : linalg.Vector2f32),
  // ImClamp : #type proc "c" (pOut : ^linalg.Vector2f32, v : linalg.Vector2f32, mn : linalg.Vector2f32, mx : linalg.Vector2f32),
  // ImLerp_Vec2Float : #type proc "c" (pOut : ^linalg.Vector2f32, a : linalg.Vector2f32, b : linalg.Vector2f32, t : _c.float),
  // ImLerp_Vec2Vec2 : #type proc "c" (pOut : ^linalg.Vector2f32, a : linalg.Vector2f32, b : linalg.Vector2f32, t : linalg.Vector2f32),
  // ImLerp_Vec4 : #type proc "c" (pOut : ^ImVec4, a : ImVec4, b : ImVec4, t : _c.float),
  // ImSaturate : #type proc "c" (f : _c.float) -> _c.float,
  // ImLengthSqr_Vec2 : #type proc "c" (lhs : linalg.Vector2f32) -> _c.float,
  // ImLengthSqr_Vec4 : #type proc "c" (lhs : ImVec4) -> _c.float,
  // ImInvLength : #type proc "c" (lhs : linalg.Vector2f32, fail_value : _c.float) -> _c.float,
  // ImFloor_Float : #type proc "c" (f : _c.float) -> _c.float,
  // ImFloor_Vec2 : #type proc "c" (pOut : ^linalg.Vector2f32, v : linalg.Vector2f32),
  // ImModPositive : #type proc "c" (a : _c.int, b : _c.int) -> _c.int,
  // ImDot : #type proc "c" (a : linalg.Vector2f32, b : linalg.Vector2f32) -> _c.float,
  // ImRotate : #type proc "c" (pOut : ^linalg.Vector2f32, v : linalg.Vector2f32, cos_a : _c.float, sin_a : _c.float),
  // ImLinearSweep : #type proc "c" (current : _c.float, target : _c.float, speed : _c.float) -> _c.float,
  // ImMul : #type proc "c" (pOut : ^linalg.Vector2f32, lhs : linalg.Vector2f32, rhs : linalg.Vector2f32),
  // ImBezierCubicCalc : #type proc "c" (pOut : ^linalg.Vector2f32, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, t : _c.float),
  // ImBezierCubicClosestPoint : #type proc "c" (pOut : ^linalg.Vector2f32, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, p : linalg.Vector2f32, num_segments : _c.int),
  // ImBezierCubicClosestPointCasteljau : #type proc "c" (pOut : ^linalg.Vector2f32, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, p : linalg.Vector2f32, tess_tol : _c.float),
  // ImBezierQuadraticCalc : #type proc "c" (pOut : ^linalg.Vector2f32, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, t : _c.float),
  // ImLineClosestPoint : #type proc "c" (pOut : ^linalg.Vector2f32, a : linalg.Vector2f32, b : linalg.Vector2f32, p : linalg.Vector2f32),
  // ImTriangleContainsPoint : #type proc "c" (a : linalg.Vector2f32, b : linalg.Vector2f32, c : linalg.Vector2f32, p : linalg.Vector2f32) -> bool,
  // ImTriangleClosestPoint : #type proc "c" (pOut : ^linalg.Vector2f32, a : linalg.Vector2f32, b : linalg.Vector2f32, c : linalg.Vector2f32, p : linalg.Vector2f32),
  // ImTriangleBarycentricCoords : #type proc "c" (a : linalg.Vector2f32, b : linalg.Vector2f32, c : linalg.Vector2f32, p : linalg.Vector2f32, out_u : ^_c.float, out_v : ^_c.float, out_w : ^_c.float),
  // ImTriangleArea : #type proc "c" (a : linalg.Vector2f32, b : linalg.Vector2f32, c : linalg.Vector2f32) -> _c.float,
  // ImGetDirQuadrantFromDelta : #type proc "c" (dx : _c.float, dy : _c.float) -> _c.int,
  // ImBitArrayTestBit : #type proc "c" (arr : ^_c.uint, n : _c.int) -> bool,
  // ImBitArrayClearBit : #type proc "c" (arr : ^_c.uint, n : _c.int),
  // ImBitArraySetBit : #type proc "c" (arr : ^_c.uint, n : _c.int),
  // ImBitArraySetBitRange : #type proc "c" (arr : ^_c.uint, n : _c.int, n2 : _c.int),
  // GetCurrentWindowRead : #type proc "c" () -> ^ImGuiWindow,
  // GetCurrentWindow : #type proc "c" () -> ^ImGuiWindow,
  // FindWindowByID : #type proc "c" (id : _c.uint) -> ^ImGuiWindow,
  // FindWindowByName : #type proc "c" (name : cstring) -> ^ImGuiWindow,
  // UpdateWindowParentAndRootLinks : #type proc "c" (window : ^ImGuiWindow, flags : _c.int, parent_window : ^ImGuiWindow),
  // CalcWindowNextAutoFitSize : #type proc "c" (pOut : ^linalg.Vector2f32, window : ^ImGuiWindow),
  // IsWindowChildOf : #type proc "c" (window : ^ImGuiWindow, potential_parent : ^ImGuiWindow) -> bool,
  // IsWindowAbove : #type proc "c" (potential_above : ^ImGuiWindow, potential_below : ^ImGuiWindow) -> bool,
  // IsWindowNavFocusable : #type proc "c" (window : ^ImGuiWindow) -> bool,
  // GetWindowAllowedExtentRect : #type proc "c" (pOut : ^ImRect, window : ^ImGuiWindow),
  // SetWindowPos_WindowPtr : #type proc "c" (window : ^ImGuiWindow, pos : linalg.Vector2f32, cond : _c.int),
  // SetWindowSize_WindowPtr : #type proc "c" (window : ^ImGuiWindow, size : linalg.Vector2f32, cond : _c.int),
  // SetWindowCollapsed_WindowPtr : #type proc "c" (window : ^ImGuiWindow, collapsed : bool, cond : _c.int),
  // SetWindowHitTestHole : #type proc "c" (window : ^ImGuiWindow, pos : linalg.Vector2f32, size : linalg.Vector2f32),
  // FocusWindow : #type proc "c" (window : ^ImGuiWindow),
  // FocusTopMostWindowUnderOne : #type proc "c" (under_this_window : ^ImGuiWindow, ignore_window : ^ImGuiWindow),
  // BringWindowToFocusFront : #type proc "c" (window : ^ImGuiWindow),
  // BringWindowToDisplayFront : #type proc "c" (window : ^ImGuiWindow),
  // BringWindowToDisplayBack : #type proc "c" (window : ^ImGuiWindow),
  // SetCurrentFont : #type proc "c" (font : ^ImFont),
  // GetDefaultFont : #type proc "c" () -> ^ImFont,
  // GetForegroundDrawList_WindowPtr : #type proc "c" (window : ^ImGuiWindow) -> ^ImDrawList,
  // Initialize : #type proc "c" (ctx : ^ImGuiContext),
  // Shutdown : #type proc "c" (ctx : ^ImGuiContext),
  // UpdateHoveredWindowAndCaptureFlags : #type proc "c" (),
  // StartMouseMovingWindow : #type proc "c" (window : ^ImGuiWindow),
  // StartMouseMovingWindowOrNode : #type proc "c" (window : ^ImGuiWindow, node : ^ImGuiDockNode, undock_floating_node : bool),
  // UpdateMouseMovingWindowNewFrame : #type proc "c" (),
  // UpdateMouseMovingWindowEndFrame : #type proc "c" (),
  // AddContextHook : #type proc "c" (ctx : ^ImGuiContext, hook : ^ImGuiContextHook) -> _c.uint,
  // RemoveContextHook : #type proc "c" (ctx : ^ImGuiContext, hook_to_remove : _c.uint),
  // CallContextHooks : #type proc "c" (ctx : ^ImGuiContext, type : ImGuiContextHookType),
  // TranslateWindowsInViewport : #type proc "c" (viewport : ^ImGuiViewportP, old_pos : linalg.Vector2f32, new_pos : linalg.Vector2f32),
  // ScaleWindowsInViewport : #type proc "c" (viewport : ^ImGuiViewportP, scale : _c.float),
  // DestroyPlatformWindow : #type proc "c" (viewport : ^ImGuiViewportP),
  // GetViewportPlatformMonitor : #type proc "c" (viewport : ^ImGuiViewport) -> ^ImGuiPlatformMonitor,
  // MarkIniSettingsDirty_Nil : #type proc "c" (),
  // MarkIniSettingsDirty_WindowPtr : #type proc "c" (window : ^ImGuiWindow),
  // ClearIniSettings : #type proc "c" (),
  // CreateNewWindowSettings : #type proc "c" (name : cstring) -> ^ImGuiWindowSettings,
  // FindWindowSettings : #type proc "c" (id : _c.uint) -> ^ImGuiWindowSettings,
  // FindOrCreateWindowSettings : #type proc "c" (name : cstring) -> ^ImGuiWindowSettings,
  // FindSettingsHandler : #type proc "c" (type_name : cstring) -> ^ImGuiSettingsHandler,
  // SetNextWindowScroll : #type proc "c" (scroll : linalg.Vector2f32),
  // SetScrollX_WindowPtr : #type proc "c" (window : ^ImGuiWindow, scroll_x : _c.float),
  // SetScrollY_WindowPtr : #type proc "c" (window : ^ImGuiWindow, scroll_y : _c.float),
  // SetScrollFromPosX_WindowPtr : #type proc "c" (window : ^ImGuiWindow, local_x : _c.float, center_x_ratio : _c.float),
  // SetScrollFromPosY_WindowPtr : #type proc "c" (window : ^ImGuiWindow, local_y : _c.float, center_y_ratio : _c.float),
  // ScrollToBringRectIntoView : #type proc "c" (pOut : ^linalg.Vector2f32, window : ^ImGuiWindow, item_rect : ImRect),
  // GetItemID : #type proc "c" () -> _c.uint,
  // GetItemStatusFlags : #type proc "c" () -> _c.int,
  // GetActiveID : #type proc "c" () -> _c.uint,
  // GetFocusID : #type proc "c" () -> _c.uint,
  // GetItemsFlags : #type proc "c" () -> _c.int,
  // SetActiveID : #type proc "c" (id : _c.uint, window : ^ImGuiWindow),
  // SetFocusID : #type proc "c" (id : _c.uint, window : ^ImGuiWindow),
  // ClearActiveID : #type proc "c" (),
  // GetHoveredID : #type proc "c" () -> _c.uint,
  // SetHoveredID : #type proc "c" (id : _c.uint),
  // KeepAliveID : #type proc "c" (id : _c.uint),
  // MarkItemEdited : #type proc "c" (id : _c.uint),
  // PushOverrideID : #type proc "c" (id : _c.uint),
  // GetIDWithSeed : #type proc "c" (str_id_begin : cstring, str_id_end : cstring, seed : _c.uint) -> _c.uint,
  // ItemSize_Vec2 : #type proc "c" (size : linalg.Vector2f32, text_baseline_y : _c.float),
  // ItemSize_Rect : #type proc "c" (bb : ImRect, text_baseline_y : _c.float),
  // ItemAdd : #type proc "c" (bb : ImRect, id : _c.uint, nav_bb : ^ImRect) -> bool,
  // ItemHoverable : #type proc "c" (bb : ImRect, id : _c.uint) -> bool,
  // IsClippedEx : #type proc "c" (bb : ImRect, id : _c.uint, clip_even_when_logged : bool) -> bool,
  // SetLastItemData : #type proc "c" (window : ^ImGuiWindow, item_id : _c.uint, status_flags : _c.int, item_rect : ImRect),
  // FocusableItemRegister : #type proc "c" (window : ^ImGuiWindow, id : _c.uint) -> bool,
  // FocusableItemUnregister : #type proc "c" (window : ^ImGuiWindow),
  // CalcItemSize : #type proc "c" (pOut : ^linalg.Vector2f32, size : linalg.Vector2f32, default_w : _c.float, default_h : _c.float),
  // CalcWrapWidthForPos : #type proc "c" (pos : linalg.Vector2f32, wrap_pos_x : _c.float) -> _c.float,
  // PushMultiItemsWidths : #type proc "c" (components : _c.int, width_full : _c.float),
  // PushItemFlag : #type proc "c" (option : _c.int, enabled : bool),
  // PopItemFlag : #type proc "c" (),
  // IsItemToggledSelection : #type proc "c" () -> bool,
  // GetContentRegionMaxAbs : #type proc "c" (pOut : ^linalg.Vector2f32),
  // ShrinkWidths : #type proc "c" (items : ^ImGuiShrinkWidthItem, count : _c.int, width_excess : _c.float),
  // LogBegin : #type proc "c" (type : ImGuiLogType, auto_open_depth : _c.int),
  // LogToBuffer : #type proc "c" (auto_open_depth : _c.int),
  // LogRenderedText : #type proc "c" (ref_pos : ^linalg.Vector2f32, text : cstring, text_end : cstring),
  // LogSetNextTextDecoration : #type proc "c" (prefix : cstring, suffix : cstring),
  // BeginChildEx : #type proc "c" (name : cstring, id : _c.uint, size_arg : linalg.Vector2f32, border : bool, flags : _c.int) -> bool,
  // OpenPopupEx : #type proc "c" (id : _c.uint, popup_flags : _c.int),
  // ClosePopupToLevel : #type proc "c" (remaining : _c.int, restore_focus_to_window_under_popup : bool),
  // ClosePopupsOverWindow : #type proc "c" (ref_window : ^ImGuiWindow, restore_focus_to_window_under_popup : bool),
  // IsPopupOpen_ID : #type proc "c" (id : _c.uint, popup_flags : _c.int) -> bool,
  // BeginPopupEx : #type proc "c" (id : _c.uint, extra_flags : _c.int) -> bool,
  // BeginTooltipEx : #type proc "c" (extra_flags : _c.int, tooltip_flags : _c.int),
  // GetTopMostPopupModal : #type proc "c" () -> ^ImGuiWindow,
  // FindBestWindowPosForPopup : #type proc "c" (pOut : ^linalg.Vector2f32, window : ^ImGuiWindow),
  // FindBestWindowPosForPopupEx : #type proc "c" (pOut : ^linalg.Vector2f32, ref_pos : linalg.Vector2f32, size : linalg.Vector2f32, last_dir : ^_c.int, r_outer : ImRect, r_avoid : ImRect, policy : ImGuiPopupPositionPolicy),
  // NavInitWindow : #type proc "c" (window : ^ImGuiWindow, force_reinit : bool),
  // NavMoveRequestButNoResultYet : #type proc "c" () -> bool,
  // NavMoveRequestCancel : #type proc "c" (),
  // NavMoveRequestForward : #type proc "c" (move_dir : _c.int, clip_dir : _c.int, bb_rel : ImRect, move_flags : _c.int),
  // NavMoveRequestTryWrapping : #type proc "c" (window : ^ImGuiWindow, move_flags : _c.int),
  // GetNavInputAmount : #type proc "c" (n : _c.int, mode : ImGuiInputReadMode) -> _c.float,
  // GetNavInputAmount2d : #type proc "c" (pOut : ^linalg.Vector2f32, dir_sources : _c.int, mode : ImGuiInputReadMode, slow_factor : _c.float, fast_factor : _c.float),
  // CalcTypematicRepeatAmount : #type proc "c" (t0 : _c.float, t1 : _c.float, repeat_delay : _c.float, repeat_rate : _c.float) -> _c.int,
  // ActivateItem : #type proc "c" (id : _c.uint),
  // SetNavID : #type proc "c" (id : _c.uint, nav_layer : _c.int, focus_scope_id : _c.uint, rect_rel : ImRect),
  // PushFocusScope : #type proc "c" (id : _c.uint),
  // PopFocusScope : #type proc "c" (),
  // GetFocusedFocusScope : #type proc "c" () -> _c.uint,
  // GetFocusScope : #type proc "c" () -> _c.uint,
  // SetItemUsingMouseWheel : #type proc "c" (),
  // IsActiveIdUsingNavDir : #type proc "c" (dir : _c.int) -> bool,
  // IsActiveIdUsingNavInput : #type proc "c" (input : _c.int) -> bool,
  // IsActiveIdUsingKey : #type proc "c" (key : _c.int) -> bool,
  // IsMouseDragPastThreshold : #type proc "c" (button : _c.int, lock_threshold : _c.float) -> bool,
  // IsKeyPressedMap : #type proc "c" (key : _c.int, repeat : bool) -> bool,
  // IsNavInputDown : #type proc "c" (n : _c.int) -> bool,
  // IsNavInputTest : #type proc "c" (n : _c.int, rm : ImGuiInputReadMode) -> bool,
  // GetMergedKeyModFlags : #type proc "c" () -> _c.int,
  // DockContextInitialize : #type proc "c" (ctx : ^ImGuiContext),
  // DockContextShutdown : #type proc "c" (ctx : ^ImGuiContext),
  // DockContextClearNodes : #type proc "c" (ctx : ^ImGuiContext, root_id : _c.uint, clear_settings_refs : bool),
  // DockContextRebuildNodes : #type proc "c" (ctx : ^ImGuiContext),
  // DockContextNewFrameUpdateUndocking : #type proc "c" (ctx : ^ImGuiContext),
  // DockContextNewFrameUpdateDocking : #type proc "c" (ctx : ^ImGuiContext),
  // DockContextGenNodeID : #type proc "c" (ctx : ^ImGuiContext) -> _c.uint,
  // DockContextQueueDock : #type proc "c" (ctx : ^ImGuiContext, target : ^ImGuiWindow, target_node : ^ImGuiDockNode, payload : ^ImGuiWindow, split_dir : _c.int, split_ratio : _c.float, split_outer : bool),
  // DockContextQueueUndockWindow : #type proc "c" (ctx : ^ImGuiContext, window : ^ImGuiWindow),
  // DockContextQueueUndockNode : #type proc "c" (ctx : ^ImGuiContext, node : ^ImGuiDockNode),
  // DockContextCalcDropPosForDocking : #type proc "c" (target : ^ImGuiWindow, target_node : ^ImGuiDockNode, payload : ^ImGuiWindow, split_dir : _c.int, split_outer : bool, out_pos : ^linalg.Vector2f32) -> bool,
  // DockNodeBeginAmendTabBar : #type proc "c" (node : ^ImGuiDockNode) -> bool,
  // DockNodeEndAmendTabBar : #type proc "c" (),
  // DockNodeGetRootNode : #type proc "c" (node : ^ImGuiDockNode) -> ^ImGuiDockNode,
  // DockNodeGetDepth : #type proc "c" (node : ^ImGuiDockNode) -> _c.int,
  // GetWindowDockNode : #type proc "c" () -> ^ImGuiDockNode,
  // GetWindowAlwaysWantOwnTabBar : #type proc "c" (window : ^ImGuiWindow) -> bool,
  // BeginDocked : #type proc "c" (window : ^ImGuiWindow, p_open : ^bool),
  // BeginDockableDragDropSource : #type proc "c" (window : ^ImGuiWindow),
  // BeginDockableDragDropTarget : #type proc "c" (window : ^ImGuiWindow),
  // SetWindowDock : #type proc "c" (window : ^ImGuiWindow, dock_id : _c.uint, cond : _c.int),
  // DockBuilderDockWindow : #type proc "c" (window_name : cstring, node_id : _c.uint),
  // DockBuilderGetNode : #type proc "c" (node_id : _c.uint) -> ^ImGuiDockNode,
  // DockBuilderGetCentralNode : #type proc "c" (node_id : _c.uint) -> ^ImGuiDockNode,
  // DockBuilderAddNode : #type proc "c" (node_id : _c.uint, flags : _c.int) -> _c.uint,
  // DockBuilderRemoveNode : #type proc "c" (node_id : _c.uint),
  // DockBuilderRemoveNodeDockedWindows : #type proc "c" (node_id : _c.uint, clear_settings_refs : bool),
  // DockBuilderRemoveNodeChildNodes : #type proc "c" (node_id : _c.uint),
  // DockBuilderSetNodePos : #type proc "c" (node_id : _c.uint, pos : linalg.Vector2f32),
  // DockBuilderSetNodeSize : #type proc "c" (node_id : _c.uint, size : linalg.Vector2f32),
  // DockBuilderSplitNode : #type proc "c" (node_id : _c.uint, split_dir : _c.int, size_ratio_for_node_at_dir : _c.float, out_id_at_dir : ^_c.uint, out_id_at_opposite_dir : ^_c.uint) -> _c.uint,
  // DockBuilderCopyDockSpace : #type proc "c" (src_dockspace_id : _c.uint, dst_dockspace_id : _c.uint, in_window_remap_pairs : ^ImVectorconstcharPtr),
  // DockBuilderCopyNode : #type proc "c" (src_node_id : _c.uint, dst_node_id : _c.uint, out_node_remap_pairs : ^ImVector_ImGuiID),
  // DockBuilderCopyWindowSettings : #type proc "c" (src_name : cstring, dst_name : cstring),
  // DockBuilderFinish : #type proc "c" (node_id : _c.uint),
  // BeginDragDropTargetCustom : #type proc "c" (bb : ImRect, id : _c.uint) -> bool,
  // ClearDragDrop : #type proc "c" (),
  // IsDragDropPayloadBeingAccepted : #type proc "c" () -> bool,
  // SetWindowClipRectBeforeSetChannel : #type proc "c" (window : ^ImGuiWindow, clip_rect : ImRect),
  // BeginColumns : #type proc "c" (str_id : cstring, count : _c.int, flags : _c.int),
  // EndColumns : #type proc "c" (),
  // PushColumnClipRect : #type proc "c" (column_index : _c.int),
  // PushColumnsBackground : #type proc "c" (),
  // PopColumnsBackground : #type proc "c" (),
  // GetColumnsID : #type proc "c" (str_id : cstring, count : _c.int) -> _c.uint,
  // FindOrCreateColumns : #type proc "c" (window : ^ImGuiWindow, id : _c.uint) -> ^ImGuiOldColumns,
  // GetColumnOffsetFromNorm : #type proc "c" (columns : ^ImGuiOldColumns, offset_norm : _c.float) -> _c.float,
  // GetColumnNormFromOffset : #type proc "c" (columns : ^ImGuiOldColumns, offset : _c.float) -> _c.float,
  // TableOpenContextMenu : #type proc "c" (column_n : _c.int),
  // TableSetColumnEnabled : #type proc "c" (column_n : _c.int, enabled : bool),
  // TableSetColumnWidth : #type proc "c" (column_n : _c.int, width : _c.float),
  // TableSetColumnSortDirection : #type proc "c" (column_n : _c.int, sort_direction : _c.int, append_to_sort_specs : bool),
  // TableGetHoveredColumn : #type proc "c" () -> _c.int,
  // TableGetHeaderRowHeight : #type proc "c" () -> _c.float,
  // TablePushBackgroundChannel : #type proc "c" (),
  // TablePopBackgroundChannel : #type proc "c" (),
  // GetCurrentTable : #type proc "c" () -> ^ImGuiTable,
  // TableFindByID : #type proc "c" (id : _c.uint) -> ^ImGuiTable,
  // BeginTableEx : #type proc "c" (name : cstring, id : _c.uint, columnscount : _c.int, flags : _c.int, outer_size : linalg.Vector2f32, inner_width : _c.float) -> bool,
  // TableBeginInitMemory : #type proc "c" (table : ^ImGuiTable, columnscount : _c.int),
  // TableBeginApplyRequests : #type proc "c" (table : ^ImGuiTable),
  // TableSetupDrawChannels : #type proc "c" (table : ^ImGuiTable),
  // TableUpdateLayout : #type proc "c" (table : ^ImGuiTable),
  // TableUpdateBorders : #type proc "c" (table : ^ImGuiTable),
  // TableUpdateColumnsWeightFromWidth : #type proc "c" (table : ^ImGuiTable),
  // TableDrawBorders : #type proc "c" (table : ^ImGuiTable),
  // TableDrawContextMenu : #type proc "c" (table : ^ImGuiTable),
  // TableMergeDrawChannels : #type proc "c" (table : ^ImGuiTable),
  // TableSortSpecsSanitize : #type proc "c" (table : ^ImGuiTable),
  // TableSortSpecsBuild : #type proc "c" (table : ^ImGuiTable),
  // TableGetColumnNextSortDirection : #type proc "c" (column : ^ImGuiTableColumn) -> _c.int,
  // TableFixColumnSortDirection : #type proc "c" (table : ^ImGuiTable, column : ^ImGuiTableColumn),
  // TableGetColumnWidthAuto : #type proc "c" (table : ^ImGuiTable, column : ^ImGuiTableColumn) -> _c.float,
  // TableBeginRow : #type proc "c" (table : ^ImGuiTable),
  // TableEndRow : #type proc "c" (table : ^ImGuiTable),
  // TableBeginCell : #type proc "c" (table : ^ImGuiTable, column_n : _c.int),
  // TableEndCell : #type proc "c" (table : ^ImGuiTable),
  // TableGetCellBgRect : #type proc "c" (pOut : ^ImRect, table : ^ImGuiTable, column_n : _c.int),
  // TableGetColumnName_TablePtr : #type proc "c" (table : ^ImGuiTable, column_n : _c.int) -> cstring,
  // TableGetColumnResizeID : #type proc "c" (table : ^ImGuiTable, column_n : _c.int, instance_no : _c.int) -> _c.uint,
  // TableGetMaxColumnWidth : #type proc "c" (table : ^ImGuiTable, column_n : _c.int) -> _c.float,
  // TableSetColumnWidthAutoSingle : #type proc "c" (table : ^ImGuiTable, column_n : _c.int),
  // TableSetColumnWidthAutoAll : #type proc "c" (table : ^ImGuiTable),
  // TableRemove : #type proc "c" (table : ^ImGuiTable),
  // TableGcCompactTransientBuffers : #type proc "c" (table : ^ImGuiTable),
  // TableGcCompactSettings : #type proc "c" (),
  // TableLoadSettings : #type proc "c" (table : ^ImGuiTable),
  // TableSaveSettings : #type proc "c" (table : ^ImGuiTable),
  // TableResetSettings : #type proc "c" (table : ^ImGuiTable),
  // TableGetBoundSettings : #type proc "c" (table : ^ImGuiTable) -> ^ImGuiTableSettings,
  // TableSettingsInstallHandler : #type proc "c" (ctx : ^ImGuiContext),
  // TableSettingsCreate : #type proc "c" (id : _c.uint, columnscount : _c.int) -> ^ImGuiTableSettings,
  // TableSettingsFindByID : #type proc "c" (id : _c.uint) -> ^ImGuiTableSettings,
  // BeginTabBarEx : #type proc "c" (tab_bar : ^ImGuiTabBar, bb : ImRect, flags : _c.int, dock_node : ^ImGuiDockNode) -> bool,
  // TabBarFindTabByID : #type proc "c" (tab_bar : ^ImGuiTabBar, tab_id : _c.uint) -> ^ImGuiTabItem,
  // TabBarFindMostRecentlySelectedTabForActiveWindow : #type proc "c" (tab_bar : ^ImGuiTabBar) -> ^ImGuiTabItem,
  // TabBarAddTab : #type proc "c" (tab_bar : ^ImGuiTabBar, tab_flags : _c.int, window : ^ImGuiWindow),
  // TabBarRemoveTab : #type proc "c" (tab_bar : ^ImGuiTabBar, tab_id : _c.uint),
  // TabBarCloseTab : #type proc "c" (tab_bar : ^ImGuiTabBar, tab : ^ImGuiTabItem),
  // TabBarQueueReorder : #type proc "c" (tab_bar : ^ImGuiTabBar, tab : ^ImGuiTabItem, dir : _c.int),
  // TabBarProcessReorder : #type proc "c" (tab_bar : ^ImGuiTabBar) -> bool,
  // TabItemEx : #type proc "c" (tab_bar : ^ImGuiTabBar, label : cstring, p_open : ^bool, flags : _c.int, docked_window : ^ImGuiWindow) -> bool,
  // TabItemCalcSize : #type proc "c" (pOut : ^linalg.Vector2f32, label : cstring, hasclose_button : bool),
  // TabItemBackground : #type proc "c" (draw_list : ^ImDrawList, bb : ImRect, flags : _c.int, col : _c.uint),
  // TabItemLabelAndCloseButton : #type proc "c" (draw_list : ^ImDrawList, bb : ImRect, flags : _c.int, frame_padding : linalg.Vector2f32, label : cstring, tab_id : _c.uint, close_button_id : _c.uint, iscontents_visible : bool, out_justclosed : ^bool, out_textclipped : ^bool),
  // RenderText : #type proc "c" (pos : linalg.Vector2f32, text : cstring, text_end : cstring, hide_text_after_hash : bool),
  // RenderTextWrapped : #type proc "c" (pos : linalg.Vector2f32, text : cstring, text_end : cstring, wrap_width : _c.float),
  // RenderTextClipped : #type proc "c" (pos_min : linalg.Vector2f32, pos_max : linalg.Vector2f32, text : cstring, text_end : cstring, text_size_if_known : ^linalg.Vector2f32, align : linalg.Vector2f32, clip_rect : ^ImRect),
  // RenderTextClippedEx : #type proc "c" (draw_list : ^ImDrawList, pos_min : linalg.Vector2f32, pos_max : linalg.Vector2f32, text : cstring, text_end : cstring, text_size_if_known : ^linalg.Vector2f32, align : linalg.Vector2f32, clip_rect : ^ImRect),
  // RenderTextEllipsis : #type proc "c" (draw_list : ^ImDrawList, pos_min : linalg.Vector2f32, pos_max : linalg.Vector2f32, clip_max_x : _c.float, ellipsis_max_x : _c.float, text : cstring, text_end : cstring, text_size_if_known : ^linalg.Vector2f32),
  // RenderFrame : #type proc "c" (p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, fillcol : _c.uint, border : bool, rounding : _c.float),
  // RenderFrameBorder : #type proc "c" (p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, rounding : _c.float),
  // RenderColorRectWithAlphaCheckerboard : #type proc "c" (draw_list : ^ImDrawList, p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, fillcol : _c.uint, grid_step : _c.float, grid_off : linalg.Vector2f32, rounding : _c.float, flags : _c.int),
  // RenderNavHighlight : #type proc "c" (bb : ImRect, id : _c.uint, flags : _c.int),
  // FindRenderedTextEnd : #type proc "c" (text : cstring, text_end : cstring) -> cstring,
  // RenderArrow : #type proc "c" (draw_list : ^ImDrawList, pos : linalg.Vector2f32, col : _c.uint, dir : _c.int, scale : _c.float),
  // RenderBullet : #type proc "c" (draw_list : ^ImDrawList, pos : linalg.Vector2f32, col : _c.uint),
  // RenderCheckMark : #type proc "c" (draw_list : ^ImDrawList, pos : linalg.Vector2f32, col : _c.uint, sz : _c.float),
  // RenderMouseCursor : #type proc "c" (draw_list : ^ImDrawList, pos : linalg.Vector2f32, scale : _c.float, mousecursor : _c.int, col_fill : _c.uint, col_border : _c.uint, col_shadow : _c.uint),
  // RenderArrowPointingAt : #type proc "c" (draw_list : ^ImDrawList, pos : linalg.Vector2f32, half_sz : linalg.Vector2f32, direction : _c.int, col : _c.uint),
  // RenderArrowDockMenu : #type proc "c" (draw_list : ^ImDrawList, p_min : linalg.Vector2f32, sz : _c.float, col : _c.uint),
  // RenderRectFilledRangeH : #type proc "c" (draw_list : ^ImDrawList, rect : ImRect, col : _c.uint, x_start_norm : _c.float, x_end_norm : _c.float, rounding : _c.float),
  // RenderRectFilledWithHole : #type proc "c" (draw_list : ^ImDrawList, outer : ImRect, inner : ImRect, col : _c.uint, rounding : _c.float),
  // TextEx : #type proc "c" (text : cstring, text_end : cstring, flags : _c.int),
  // ButtonEx : #type proc "c" (label : cstring, size_arg : linalg.Vector2f32, flags : _c.int) -> bool,
  // CloseButton : #type proc "c" (id : _c.uint, pos : linalg.Vector2f32) -> bool,
  // CollapseButton : #type proc "c" (id : _c.uint, pos : linalg.Vector2f32, dock_node : ^ImGuiDockNode) -> bool,
  // ArrowButtonEx : #type proc "c" (str_id : cstring, dir : _c.int, size_arg : linalg.Vector2f32, flags : _c.int) -> bool,
  // Scrollbar : #type proc "c" (axis : ImGuiAxis),
  // ScrollbarEx : #type proc "c" (bb : ImRect, id : _c.uint, axis : ImGuiAxis, p_scroll_v : ^_c.float, avail_v : _c.float, contents_v : _c.float, flags : _c.int) -> bool,
  // ImageButtonEx : #type proc "c" (id : _c.uint, texture_id : ImTextureID, size : linalg.Vector2f32, uv0 : linalg.Vector2f32, uv1 : linalg.Vector2f32, padding : linalg.Vector2f32, bgcol : ImVec4, tintcol : ImVec4) -> bool,
  // GetWindowScrollbarRect : #type proc "c" (pOut : ^ImRect, window : ^ImGuiWindow, axis : ImGuiAxis),
  // GetWindowScrollbarID : #type proc "c" (window : ^ImGuiWindow, axis : ImGuiAxis) -> _c.uint,
  // GetWindowResizeID : #type proc "c" (window : ^ImGuiWindow, n : _c.int) -> _c.uint,
  // SeparatorEx : #type proc "c" (flags : _c.int),
  // CheckboxFlags_S64Ptr : #type proc "c" (label : cstring, flags : ^i64, flags_value : i64) -> bool,
  // CheckboxFlags_U64Ptr : #type proc "c" (label : cstring, flags : ^u64, flags_value : u64) -> bool,
  // ButtonBehavior : #type proc "c" (bb : ImRect, id : _c.uint, out_hovered : ^bool, out_held : ^bool, flags : _c.int) -> bool,
  // DragBehavior : #type proc "c" (id : _c.uint, data_type : _c.int, p_v : rawptr, v_speed : _c.float, p_min : rawptr, p_max : rawptr, format : cstring, flags : _c.int) -> bool,
  // SliderBehavior : #type proc "c" (bb : ImRect, id : _c.uint, data_type : _c.int, p_v : rawptr, p_min : rawptr, p_max : rawptr, format : cstring, flags : _c.int, out_grab_bb : ^ImRect) -> bool,
  // SplitterBehavior : #type proc "c" (bb : ImRect, id : _c.uint, axis : ImGuiAxis, size1 : ^_c.float, size2 : ^_c.float, min_size1 : _c.float, min_size2 : _c.float, hover_extend : _c.float, hover_visibility_delay : _c.float) -> bool,
  // TreeNodeBehavior : #type proc "c" (id : _c.uint, flags : _c.int, label : cstring, label_end : cstring) -> bool,
  // TreeNodeBehaviorIsOpen : #type proc "c" (id : _c.uint, flags : _c.int) -> bool,
  // TreePushOverrideID : #type proc "c" (id : _c.uint),
  // DataTypeGetInfo : #type proc "c" (data_type : _c.int) -> ^ImGuiDataTypeInfo,
  // DataTypeFormatString : #type proc "c" (buf : cstring, buf_size : _c.int, data_type : _c.int, p_data : rawptr, format : cstring) -> _c.int,
  // DataTypeApplyOp : #type proc "c" (data_type : _c.int, op : _c.int, output : rawptr, arg_1 : rawptr, arg_2 : rawptr),
  // DataTypeApplyOpFromText : #type proc "c" (buf : cstring, initial_value_buf : cstring, data_type : _c.int, p_data : rawptr, format : cstring) -> bool,
  // DataTypeCompare : #type proc "c" (data_type : _c.int, arg_1 : rawptr, arg_2 : rawptr) -> _c.int,
  // DataTypeClamp : #type proc "c" (data_type : _c.int, p_data : rawptr, p_min : rawptr, p_max : rawptr) -> bool,
  // InputTextEx : #type proc "c" (label : cstring, hint : cstring, buf : cstring, buf_size : _c.int, size_arg : linalg.Vector2f32, flags : _c.int, callback : ImGuiInputTextCallback, user_data : rawptr) -> bool,
  // TempInputText : #type proc "c" (bb : ImRect, id : _c.uint, label : cstring, buf : cstring, buf_size : _c.int, flags : _c.int) -> bool,
  // TempInputScalar : #type proc "c" (bb : ImRect, id : _c.uint, label : cstring, data_type : _c.int, p_data : rawptr, format : cstring, pclamp_min : rawptr, pclamp_max : rawptr) -> bool,
  // TempInputIsActive : #type proc "c" (id : _c.uint) -> bool,
  // GetInputTextState : #type proc "c" (id : _c.uint) -> ^ImGuiInputTextState,
  // ColorTooltip : #type proc "c" (text : cstring, col : ^_c.float, flags : _c.int),
  // ColorEditOptionsPopup : #type proc "c" (col : ^_c.float, flags : _c.int),
  // ColorPickerOptionsPopup : #type proc "c" (refcol : ^_c.float, flags : _c.int),
  // PlotEx : #type proc "c" (plot_type : ImGuiPlotType, label : cstring, unamed0 : #type proc "c" (data : rawptr, idx : _c.int) -> _c.float, data : rawptr, valuescount : _c.int, values_offset : _c.int, overlay_text : cstring, scale_min : _c.float, scale_max : _c.float, frame_size : linalg.Vector2f32) -> _c.int,
  // ShadeVertsLinearColorGradientKeepAlpha : #type proc "c" (draw_list : ^ImDrawList, vert_start_idx : _c.int, vert_end_idx : _c.int, gradient_p0 : linalg.Vector2f32, gradient_p1 : linalg.Vector2f32, col0 : _c.uint, col1 : _c.uint),
  // ShadeVertsLinearUV : #type proc "c" (draw_list : ^ImDrawList, vert_start_idx : _c.int, vert_end_idx : _c.int, a : linalg.Vector2f32, b : linalg.Vector2f32, uv_a : linalg.Vector2f32, uv_b : linalg.Vector2f32, clamp : bool),
  // GcCompactTransientMiscBuffers : #type proc "c" (),
  // GcCompactTransientWindowBuffers : #type proc "c" (window : ^ImGuiWindow),
  // GcAwakeTransientWindowBuffers : #type proc "c" (window : ^ImGuiWindow),
  // ErrorCheckEndFrameRecover : #type proc "c" (logcallback : ImGuiErrorLogCallback, user_data : rawptr),
  // DebugDrawItemRect : #type proc "c" (col : _c.uint),
  // DebugStartItemPicker : #type proc "c" (),
  // DebugNodeColumns : #type proc "c" (columns : ^ImGuiOldColumns),
  // DebugNodeDockNode : #type proc "c" (node : ^ImGuiDockNode, label : cstring),
  // DebugNodeDrawList : #type proc "c" (window : ^ImGuiWindow, viewport : ^ImGuiViewportP, draw_list : ^ImDrawList, label : cstring),
  // DebugNodeDrawCmdShowMeshAndBoundingBox : #type proc "c" (out_draw_list : ^ImDrawList, draw_list : ^ImDrawList, drawcmd : ^ImDrawCmd, show_mesh : bool, show_aabb : bool),
  // DebugNodeStorage : #type proc "c" (storage : ^ImGuiStorage, label : cstring),
  // DebugNodeTabBar : #type proc "c" (tab_bar : ^ImGuiTabBar, label : cstring),
  // DebugNodeTable : #type proc "c" (table : ^ImGuiTable),
  // DebugNodeTableSettings : #type proc "c" (settings : ^ImGuiTableSettings),
  // DebugNodeWindow : #type proc "c" (window : ^ImGuiWindow, label : cstring),
  // DebugNodeWindowSettings : #type proc "c" (settings : ^ImGuiWindowSettings),
  // DebugNodeWindowsList : #type proc "c" (windows : ^ImVector_ImGuiWindowPtr, label : cstring),
  // DebugNodeViewport : #type proc "c" (viewport : ^ImGuiViewportP),
  // DebugRenderViewportThumbnail : #type proc "c" (draw_list : ^ImDrawList, viewport : ^ImGuiViewportP, bb : ImRect),
  // ImFontAtlasGetBuilderForStbTruetype : #type proc "c" () -> ^ImFontBuilderIO,
  // ImFontAtlasBuildInit : #type proc "c" (atlas : ^ImFontAtlas),
  // ImFontAtlasBuildSetupFont : #type proc "c" (atlas : ^ImFontAtlas, font : ^ImFont, fontconfig : ^ImFontConfig, ascent : _c.float, descent : _c.float),
  // ImFontAtlasBuildPackCustomRects : #type proc "c" (atlas : ^ImFontAtlas, stbrpcontext_opaque : rawptr),
  // ImFontAtlasBuildFinish : #type proc "c" (atlas : ^ImFontAtlas),
  // ImFontAtlasBuildRender8bppRectFromString : #type proc "c" (atlas : ^ImFontAtlas, x : _c.int, y : _c.int, w : _c.int, h : _c.int, in_str : cstring, in_markerchar : _c.char, in_marker_pixel_value : _c.uchar),
  // ImFontAtlasBuildRender32bppRectFromString : #type proc "c" (atlas : ^ImFontAtlas, x : _c.int, y : _c.int, w : _c.int, h : _c.int, in_str : cstring, in_markerchar : _c.char, in_marker_pixel_value : _c.uint),
  // ImFontAtlasBuildMultiplyCalcLookupTable : #type proc "c" (out_table : [256]_c.uchar, in_multiply_factor : _c.float),
  // ImFontAtlasBuildMultiplyRectAlpha8 : #type proc "c" (table : [256]_c.uchar, pixels : ^_c.uchar, x : _c.int, y : _c.int, w : _c.int, h : _c.int, stride : _c.int),
  // LogText : #type proc "c" (fmt : cstring),
  // GET_FLT_MAX : #type proc "c" () -> _c.float,
  // GET_FLT_MIN : #type proc "c" () -> _c.float,
  // ImGuiIO_AddInputCharacter : #type proc "c" (self : ^ImGuiIO, c : _c.uint),
  // ImGuiIO_AddInputCharacterUTF16 : #type proc "c" (self : ^ImGuiIO, c : _c.ushort),
  // ImGuiIO_AddInputCharactersUTF8 : #type proc "c" (self : ^ImGuiIO, str : cstring),
  // ImGuiIO_ClearInputCharacters : #type proc "c" (self : ^ImGuiIO),
  // ImGuiIO_ImGuiIO : #type proc "c" () -> ^ImGuiIO,
  // ImGuiIO_destroy : #type proc "c" (self : ^ImGuiIO),
  // ImDrawList_ImDrawList : #type proc "c" (shared_data : ^ImDrawListSharedData) -> ^ImDrawList,
  // ImDrawList_destroy : #type proc "c" (self : ^ImDrawList),
  // ImDrawList_PushClipRect : #type proc "c" (self : ^ImDrawList, clip_rect_min : linalg.Vector2f32, clip_rect_max : linalg.Vector2f32, intersect_withcurrentclip_rect : bool),
  // ImDrawList_PushClipRectFullScreen : #type proc "c" (self : ^ImDrawList),
  // ImDrawList_PopClipRect : #type proc "c" (self : ^ImDrawList),
  // ImDrawList_PushTextureID : #type proc "c" (self : ^ImDrawList, texture_id : ImTextureID),
  // ImDrawList_PopTextureID : #type proc "c" (self : ^ImDrawList),
  // ImDrawList_GetClipRectMin : #type proc "c" (pOut : ^linalg.Vector2f32, self : ^ImDrawList),
  // ImDrawList_GetClipRectMax : #type proc "c" (pOut : ^linalg.Vector2f32, self : ^ImDrawList),
  // ImDrawList_AddLine : #type proc "c" (self : ^ImDrawList, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, col : _c.uint, thickness : _c.float),
  // ImDrawList_AddRect : #type proc "c" (self : ^ImDrawList, p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, col : _c.uint, rounding : _c.float, flags : _c.int, thickness : _c.float),
  // ImDrawList_AddRectFilled : #type proc "c" (self : ^ImDrawList, p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, col : _c.uint, rounding : _c.float, flags : _c.int),
  // ImDrawList_AddRectFilledMultiColor : #type proc "c" (self : ^ImDrawList, p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, col_upr_left : _c.uint, col_upr_right : _c.uint, col_bot_right : _c.uint, col_bot_left : _c.uint),
  // ImDrawList_AddQuad : #type proc "c" (self : ^ImDrawList, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, col : _c.uint, thickness : _c.float),
  // ImDrawList_AddQuadFilled : #type proc "c" (self : ^ImDrawList, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_AddTriangle : #type proc "c" (self : ^ImDrawList, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, col : _c.uint, thickness : _c.float),
  // ImDrawList_AddTriangleFilled : #type proc "c" (self : ^ImDrawList, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_AddCircle : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, col : _c.uint, num_segments : _c.int, thickness : _c.float),
  // ImDrawList_AddCircleFilled : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, col : _c.uint, num_segments : _c.int),
  // ImDrawList_AddNgon : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, col : _c.uint, num_segments : _c.int, thickness : _c.float),
  // ImDrawList_AddNgonFilled : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, col : _c.uint, num_segments : _c.int),
  // ImDrawList_AddText_Vec2 : #type proc "c" (self : ^ImDrawList, pos : linalg.Vector2f32, col : _c.uint, text_begin : cstring, text_end : cstring),
  // ImDrawList_AddText_FontPtr : #type proc "c" (self : ^ImDrawList, font : ^ImFont, font_size : _c.float, pos : linalg.Vector2f32, col : _c.uint, text_begin : cstring, text_end : cstring, wrap_width : _c.float, cpu_fineclip_rect : ^ImVec4),
  // ImDrawList_AddPolyline : #type proc "c" (self : ^ImDrawList, points : ^linalg.Vector2f32, num_points : _c.int, col : _c.uint, flags : _c.int, thickness : _c.float),
  // ImDrawList_AddConvexPolyFilled : #type proc "c" (self : ^ImDrawList, points : ^linalg.Vector2f32, num_points : _c.int, col : _c.uint),
  // ImDrawList_AddBezierCubic : #type proc "c" (self : ^ImDrawList, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, col : _c.uint, thickness : _c.float, num_segments : _c.int),
  // ImDrawList_AddBezierQuadratic : #type proc "c" (self : ^ImDrawList, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, col : _c.uint, thickness : _c.float, num_segments : _c.int),
  // ImDrawList_AddImage : #type proc "c" (self : ^ImDrawList, user_texture_id : ImTextureID, p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, uv_min : linalg.Vector2f32, uv_max : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_AddImageQuad : #type proc "c" (self : ^ImDrawList, user_texture_id : ImTextureID, p1 : linalg.Vector2f32, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, uv1 : linalg.Vector2f32, uv2 : linalg.Vector2f32, uv3 : linalg.Vector2f32, uv4 : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_AddImageRounded : #type proc "c" (self : ^ImDrawList, user_texture_id : ImTextureID, p_min : linalg.Vector2f32, p_max : linalg.Vector2f32, uv_min : linalg.Vector2f32, uv_max : linalg.Vector2f32, col : _c.uint, rounding : _c.float, flags : _c.int),
  // ImDrawList_PathClear : #type proc "c" (self : ^ImDrawList),
  // ImDrawList_PathLineTo : #type proc "c" (self : ^ImDrawList, pos : linalg.Vector2f32),
  // ImDrawList_PathLineToMergeDuplicate : #type proc "c" (self : ^ImDrawList, pos : linalg.Vector2f32),
  // ImDrawList_PathFillConvex : #type proc "c" (self : ^ImDrawList, col : _c.uint),
  // ImDrawList_PathStroke : #type proc "c" (self : ^ImDrawList, col : _c.uint, flags : _c.int, thickness : _c.float),
  // ImDrawList_PathArcTo : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, a_min : _c.float, a_max : _c.float, num_segments : _c.int),
  // ImDrawList_PathArcToFast : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, a_min_of_12 : _c.int, a_max_of_12 : _c.int),
  // ImDrawList_PathBezierCubicCurveTo : #type proc "c" (self : ^ImDrawList, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, p4 : linalg.Vector2f32, num_segments : _c.int),
  // ImDrawList_PathBezierQuadraticCurveTo : #type proc "c" (self : ^ImDrawList, p2 : linalg.Vector2f32, p3 : linalg.Vector2f32, num_segments : _c.int),
  // ImDrawList_PathRect : #type proc "c" (self : ^ImDrawList, rect_min : linalg.Vector2f32, rect_max : linalg.Vector2f32, rounding : _c.float, flags : _c.int),
  // ImDrawList_AddCallback : #type proc "c" (self : ^ImDrawList, callback : ImDrawCallback, callback_data : rawptr),
  // ImDrawList_AddDrawCmd : #type proc "c" (self : ^ImDrawList),
  // ImDrawList_CloneOutput : #type proc "c" (self : ^ImDrawList) -> ^ImDrawList,
  // ImDrawList_ChannelsSplit : #type proc "c" (self : ^ImDrawList, count : _c.int),
  // ImDrawList_ChannelsMerge : #type proc "c" (self : ^ImDrawList),
  // ImDrawList_ChannelsSetCurrent : #type proc "c" (self : ^ImDrawList, n : _c.int),
  // ImDrawList_PrimReserve : #type proc "c" (self : ^ImDrawList, idxcount : _c.int, vtxcount : _c.int),
  // ImDrawList_PrimUnreserve : #type proc "c" (self : ^ImDrawList, idxcount : _c.int, vtxcount : _c.int),
  // ImDrawList_PrimRect : #type proc "c" (self : ^ImDrawList, a : linalg.Vector2f32, b : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_PrimRectUV : #type proc "c" (self : ^ImDrawList, a : linalg.Vector2f32, b : linalg.Vector2f32, uv_a : linalg.Vector2f32, uv_b : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_PrimQuadUV : #type proc "c" (self : ^ImDrawList, a : linalg.Vector2f32, b : linalg.Vector2f32, c : linalg.Vector2f32, d : linalg.Vector2f32, uv_a : linalg.Vector2f32, uv_b : linalg.Vector2f32, uvc : linalg.Vector2f32, uv_d : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_PrimWriteVtx : #type proc "c" (self : ^ImDrawList, pos : linalg.Vector2f32, uv : linalg.Vector2f32, col : _c.uint),
  // ImDrawList_PrimWriteIdx : #type proc "c" (self : ^ImDrawList, idx : _c.ushort),
  // ImDrawList_PrimVtx : #type proc "c" (self : ^ImDrawList, pos : linalg.Vector2f32, uv : linalg.Vector2f32, col : _c.uint),
  // ImDrawList__ResetForNewFrame : #type proc "c" (self : ^ImDrawList),
  // ImDrawList__ClearFreeMemory : #type proc "c" (self : ^ImDrawList),
  // ImDrawList__PopUnusedDrawCmd : #type proc "c" (self : ^ImDrawList),
  // ImDrawList__OnChangedClipRect : #type proc "c" (self : ^ImDrawList),
  // ImDrawList__OnChangedTextureID : #type proc "c" (self : ^ImDrawList),
  // ImDrawList__OnChangedVtxOffset : #type proc "c" (self : ^ImDrawList),
  // ImDrawList__CalcCircleAutoSegmentCount : #type proc "c" (self : ^ImDrawList, radius : _c.float) -> _c.int,
  // ImDrawList__PathArcToFastEx : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, a_min_sample : _c.int, a_max_sample : _c.int, a_step : _c.int),
  // ImDrawList__PathArcToN : #type proc "c" (self : ^ImDrawList, center : linalg.Vector2f32, radius : _c.float, a_min : _c.float, a_max : _c.float, num_segments : _c.int),
  // ImFont_ImFont : #type proc "c" () -> ^ImFont,
  // ImFont_destroy : #type proc "c" (self : ^ImFont),
  // ImFont_FindGlyph : #type proc "c" (self : ^ImFont, c : _c.ushort) -> ^ImFontGlyph,
  // ImFont_FindGlyphNoFallback : #type proc "c" (self : ^ImFont, c : _c.ushort) -> ^ImFontGlyph,
  // ImFont_GetCharAdvance : #type proc "c" (self : ^ImFont, c : _c.ushort) -> _c.float,
  // ImFont_IsLoaded : #type proc "c" (self : ^ImFont) -> bool,
  // ImFont_GetDebugName : #type proc "c" (self : ^ImFont) -> cstring,
  // ImFont_CalcTextSizeA : #type proc "c" (pOut : ^linalg.Vector2f32, self : ^ImFont, size : _c.float, max_width : _c.float, wrap_width : _c.float, text_begin : cstring, text_end : cstring, remaining : ^cstring),
  // ImFont_CalcWordWrapPositionA : #type proc "c" (self : ^ImFont, scale : _c.float, text : cstring, text_end : cstring, wrap_width : _c.float) -> cstring,
  // ImFont_RenderChar : #type proc "c" (self : ^ImFont, draw_list : ^ImDrawList, size : _c.float, pos : linalg.Vector2f32, col : _c.uint, c : _c.ushort),
  // ImFont_RenderText : #type proc "c" (self : ^ImFont, draw_list : ^ImDrawList, size : _c.float, pos : linalg.Vector2f32, col : _c.uint, clip_rect : ImVec4, text_begin : cstring, text_end : cstring, wrap_width : _c.float, cpu_fineclip : bool),
  // ImFont_BuildLookupTable : #type proc "c" (self : ^ImFont),
  // ImFont_ClearOutputData : #type proc "c" (self : ^ImFont),
  // ImFont_GrowIndex : #type proc "c" (self : ^ImFont, new_size : _c.int),
  // ImFont_AddGlyph : #type proc "c" (self : ^ImFont, srccfg : ^ImFontConfig, c : _c.ushort, x0 : _c.float, y0 : _c.float, x1 : _c.float, y1 : _c.float, u0 : _c.float, v0 : _c.float, u1 : _c.float, v1 : _c.float, advance_x : _c.float),
  // ImFont_AddRemapChar : #type proc "c" (self : ^ImFont, dst : _c.ushort, src : _c.ushort, overwrite_dst : bool),
  // ImFont_SetGlyphVisible : #type proc "c" (self : ^ImFont, c : _c.ushort, visible : bool),
  // ImFont_SetFallbackChar : #type proc "c" (self : ^ImFont, c : _c.ushort),
  // ImFont_IsGlyphRangeUnused : #type proc "c" (self : ^ImFont, c_begin : _c.uint, c_last : _c.uint) -> bool,
  // ImFontAtlas_ImFontAtlas : #type proc "c" () -> ^ImFontAtlas,
  // ImFontAtlas_destroy : #type proc "c" (self : ^ImFontAtlas),
  // ImFontAtlas_AddFont : #type proc "c" (self : ^ImFontAtlas, fontcfg : ^ImFontConfig) -> ^ImFont,
  // ImFontAtlas_AddFontDefault : #type proc "c" (self : ^ImFontAtlas, fontcfg : ^ImFontConfig) -> ^ImFont,
  // ImFontAtlas_AddFontFromFileTTF : #type proc "c" (self : ^ImFontAtlas, filename : cstring, size_pixels : _c.float, fontcfg : ^ImFontConfig, glyph_ranges : ^_c.ushort) -> ^ImFont,
  // ImFontAtlas_AddFontFromMemoryTTF : #type proc "c" (self : ^ImFontAtlas, font_data : rawptr, font_size : _c.int, size_pixels : _c.float, fontcfg : ^ImFontConfig, glyph_ranges : ^_c.ushort) -> ^ImFont,
  ImFontAtlas_AddFontFromMemoryCompressedTTF : #type proc "c" (self : ^cimgui.Font_Atlas, compressed_font_data : rawptr, compressed_font_size : _c.int, size_pixels : _c.float, fontcfg : ^cimgui.Font_Config, glyph_ranges : ^cimgui.Wchar) -> ^cimgui.ImFont,
  // ImFontAtlas_AddFontFromMemoryCompressedBase85TTF : #type proc "c" (self : ^ImFontAtlas, compressed_font_data_base85 : cstring, size_pixels : _c.float, fontcfg : ^ImFontConfig, glyph_ranges : ^_c.ushort) -> ^ImFont,
  // ImFontAtlas_ClearInputData : #type proc "c" (self : ^ImFontAtlas),
  // ImFontAtlas_ClearTexData : #type proc "c" (self : ^ImFontAtlas),
  // ImFontAtlas_ClearFonts : #type proc "c" (self : ^ImFontAtlas),
  // ImFontAtlas_Clear : #type proc "c" (self : ^ImFontAtlas),
  // ImFontAtlas_Build : #type proc "c" (self : ^ImFontAtlas) -> bool,
  // ImFontAtlas_GetTexDataAsAlpha8 : #type proc "c" (self : ^ImFontAtlas, out_pixels : ^^_c.uchar, out_width : ^_c.int, out_height : ^_c.int, out_bytes_per_pixel : ^_c.int),
  ImFontAtlas_GetTexDataAsRGBA32 : #type proc "c" (self : ^cimgui.Font_Atlas, out_pixels : ^^_c.uchar, out_width : ^_c.int, out_height : ^_c.int, out_bytes_per_pixel : ^_c.int),
  // ImFontAtlas_IsBuilt : #type proc "c" (self : ^ImFontAtlas) -> bool,
  // ImFontAtlas_SetTexID : #type proc "c" (self : ^ImFontAtlas, id : ImTextureID),
  // ImFontAtlas_GetGlyphRangesDefault : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_GetGlyphRangesKorean : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_GetGlyphRangesJapanese : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_GetGlyphRangesChineseFull : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_GetGlyphRangesCyrillic : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_GetGlyphRangesThai : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_GetGlyphRangesVietnamese : #type proc "c" (self : ^ImFontAtlas) -> ^_c.ushort,
  // ImFontAtlas_AddCustomRectRegular : #type proc "c" (self : ^ImFontAtlas, width : _c.int, height : _c.int) -> _c.int,
  // ImFontAtlas_AddCustomRectFontGlyph : #type proc "c" (self : ^ImFontAtlas, font : ^ImFont, id : _c.ushort, width : _c.int, height : _c.int, advance_x : _c.float, offset : linalg.Vector2f32) -> _c.int,
  // ImFontAtlas_GetCustomRectByIndex : #type proc "c" (self : ^ImFontAtlas, index : _c.int) -> ^ImFontAtlasCustomRect,
  // ImFontAtlas_CalcCustomRectUV : #type proc "c" (self : ^ImFontAtlas, rect : ^ImFontAtlasCustomRect, out_uv_min : ^linalg.Vector2f32, out_uv_max : ^linalg.Vector2f32),
  // ImFontAtlas_GetMouseCursorTexData : #type proc "c" (self : ^ImFontAtlas, cursor : _c.int, out_offset : ^linalg.Vector2f32, out_size : ^linalg.Vector2f32, out_uv_border : [2]linalg.Vector2f32, out_uv_fill : [2]linalg.Vector2f32) -> bool,
  // ImGuiPayload_ImGuiPayload : #type proc "c" () -> ^ImGuiPayload,
  // ImGuiPayload_destroy : #type proc "c" (self : ^ImGuiPayload),
  // ImGuiPayload_Clear : #type proc "c" (self : ^ImGuiPayload),
  // ImGuiPayload_IsDataType : #type proc "c" (self : ^ImGuiPayload, type : cstring) -> bool,
  // ImGuiPayload_IsPreview : #type proc "c" (self : ^ImGuiPayload) -> bool,
  // ImGuiPayload_IsDelivery : #type proc "c" (self : ^ImGuiPayload) -> bool,
  // ImGuiListClipper_ImGuiListClipper : #type proc "c" () -> ^ImGuiListClipper,
  // ImGuiListClipper_destroy : #type proc "c" (self : ^ImGuiListClipper),
  // ImGuiListClipper_Begin : #type proc "c" (self : ^ImGuiListClipper, itemscount : _c.int, items_height : _c.float),
  // ImGuiListClipper_End : #type proc "c" (self : ^ImGuiListClipper),
  // ImGuiListClipper_Step : #type proc "c" (self : ^ImGuiListClipper) -> bool,
  // ImGuiTextFilter_ImGuiTextFilter : #type proc "c" (default_filter : cstring) -> ^ImGuiTextFilter,
  // ImGuiTextFilter_destroy : #type proc "c" (self : ^ImGuiTextFilter),
  // ImGuiTextFilter_Draw : #type proc "c" (self : ^ImGuiTextFilter, label : cstring, width : _c.float) -> bool,
  // ImGuiTextFilter_PassFilter : #type proc "c" (self : ^ImGuiTextFilter, text : cstring, text_end : cstring) -> bool,
  // ImGuiTextFilter_Build : #type proc "c" (self : ^ImGuiTextFilter),
  // ImGuiTextFilter_Clear : #type proc "c" (self : ^ImGuiTextFilter),
  // ImGuiTextFilter_IsActive : #type proc "c" (self : ^ImGuiTextFilter) -> bool,
  // ImGuiTextBuffer_ImGuiTextBuffer : #type proc "c" () -> ^ImGuiTextBuffer,
  // ImGuiTextBuffer_destroy : #type proc "c" (self : ^ImGuiTextBuffer),
  // ImGuiTextBuffer_begin : #type proc "c" (self : ^ImGuiTextBuffer) -> cstring,
  // ImGuiTextBuffer_end : #type proc "c" (self : ^ImGuiTextBuffer) -> cstring,
  // ImGuiTextBuffer_size : #type proc "c" (self : ^ImGuiTextBuffer) -> _c.int,
  // ImGuiTextBuffer_empty : #type proc "c" (self : ^ImGuiTextBuffer) -> bool,
  // ImGuiTextBufferclear : #type proc "c" (self : ^ImGuiTextBuffer),
  // ImGuiTextBuffer_reserve : #type proc "c" (self : ^ImGuiTextBuffer, capacity : _c.int),
  // ImGuiTextBufferc_str : #type proc "c" (self : ^ImGuiTextBuffer) -> cstring,
  // ImGuiTextBuffer_append : #type proc "c" (self : ^ImGuiTextBuffer, str : cstring, str_end : cstring),
  // ImGuiTextBuffer_appendfv : #type proc "c" (self : ^ImGuiTextBuffer, fmt : cstring, #c_vararg args: ..any),
  // ImGuiTextBuffer_appendf : #type proc "c" (buffer : ^ImGuiTextBuffer, fmt : cstring),
};